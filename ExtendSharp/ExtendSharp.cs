//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

using System.Collections.Generic;

namespace ExtendSharp
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExtendService
    {
        private string _baseUrl = "https://developer.lxir.se/RESTAPI";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ExtendService(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a list of availability on agreed order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerNumber">Customer Number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AgreedOrderAvailabilityList> AgreedOrderAvailability_GetAgreedOrderAvailabilityListAsync(string client, string customerNumber, int? pageNumber, string extendBasicAuthorization)
        {
            return AgreedOrderAvailability_GetAgreedOrderAvailabilityListAsync(client, customerNumber, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of availability on agreed order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerNumber">Customer Number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AgreedOrderAvailabilityList> AgreedOrderAvailability_GetAgreedOrderAvailabilityListAsync(string client, string customerNumber, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/AgreedOrderAvailability?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgreedOrderAvailabilityList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a balance adjustment list
        /// </summary>
        /// <param name="productNumber">Product Number</param>
        /// <param name="warehouse">The Warehouse</param>
        /// <param name="eventDateFrom">Balance adjustment must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="eventDateTo">Balance adjusted before this date. Use fully qualified utc format.</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BalanceAdjustmentListItem> BalanceAdjustments_GetBalanceAdjustmentAsync(string client, string productNumber, string warehouse, System.DateTimeOffset eventDateFrom, System.DateTimeOffset? eventDateTo, int? pageNumber, string extendBasicAuthorization)
        {
            return BalanceAdjustments_GetBalanceAdjustmentAsync(client, productNumber, warehouse, eventDateFrom, eventDateTo, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a balance adjustment list
        /// </summary>
        /// <param name="productNumber">Product Number</param>
        /// <param name="warehouse">The Warehouse</param>
        /// <param name="eventDateFrom">Balance adjustment must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="eventDateTo">Balance adjusted before this date. Use fully qualified utc format.</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BalanceAdjustmentListItem> BalanceAdjustments_GetBalanceAdjustmentAsync(string client, string productNumber, string warehouse, System.DateTimeOffset eventDateFrom, System.DateTimeOffset? eventDateTo, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (warehouse == null)
                throw new System.ArgumentNullException("warehouse");

            if (eventDateFrom == null)
                throw new System.ArgumentNullException("eventDateFrom");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/BalanceAdjustments?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("eventDateFrom") + "=").Append(System.Uri.EscapeDataString(eventDateFrom.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (eventDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eventDateTo") + "=").Append(System.Uri.EscapeDataString(eventDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BalanceAdjustmentListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of countries
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Country>> Countries_GetAllCountriesAsync(string client, string extendBasicAuthorization)
        {
            return Countries_GetAllCountriesAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of countries
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Country>> Countries_GetAllCountriesAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Countries");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Country>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of Currencies
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Currency>> Currencies_GetAllCurrenciesAsync(string client, string extendBasicAuthorization)
        {
            return Currencies_GetAllCurrenciesAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of Currencies
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Currency>> Currencies_GetAllCurrenciesAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Currencies");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Currency>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The Currency Id</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Currency> Currencies_GetCurrencyAsync(string client, string id, string extendBasicAuthorization)
        {
            return Currencies_GetCurrencyAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The Currency Id</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Currency> Currencies_GetCurrencyAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Currencies/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Currency>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of customer invoices
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="invoiceNumber">Invoice number from the seller</param>
        /// <param name="customerNumber">The sellers customer number of the buyer</param>
        /// <param name="ocrNumber">The calculated payment number for the invoice, in Sweden called OCR number, in denmark FIK, in Norway KID etc, the name is different for most country, but is used for automatic identification in payment systems.</param>
        /// <param name="orderNumber">If there is a order connected to the invoice, this is the order number. For aggregated invoices order number search will not be reliable.</param>
        /// <param name="orderNumberExternal">If the buyer has added a reference number on the order. For aggregated invoices order number external search will not be reliable.</param>
        /// <param name="orderNumberEndCustomer">Additional reference number added by the buyer</param>
        /// <param name="createDate">The create date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="invoiceDate">The official invoiced date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="changeDateFrom">Change date of the invoice. Use fully qualified utc format.</param>
        /// <param name="changeDateTo">Change date of the invoice. Use fully qualified utc format.</param>
        /// <param name="dueDate">Due date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="invoiceStatus">The status of the invoice</param>
        /// <param name="invoiceType">Type of invoice</param>
        /// <param name="isAllowedToSend">Is the invoice in need of manual release or is it allowed to be sent automatically</param>
        /// <param name="sendSystem">Which system that are sending the invoice to the customer</param>
        /// <param name="buyerOrganizationNumber">Buyers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)</param>
        /// <param name="buyerGLN">GLN number of the buyer</param>
        /// <param name="exported">Is the invoice exported to financial/accounting system</param>
        /// <param name="isAggregated">Is the invoice aggregated, ie containing multplie orders</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerInvoiceListItemList> CustomerInvoices_GetCustomerInvoiceListAsync(string client, string invoiceNumber, string customerNumber, string ocrNumber, string orderNumber, string orderNumberExternal, string orderNumberEndCustomer, System.DateTimeOffset? createDate, System.DateTimeOffset? invoiceDate, System.DateTimeOffset? changeDateFrom, System.DateTimeOffset? changeDateTo, System.DateTimeOffset? dueDate, InvoiceStatus? invoiceStatus, InvoiceType? invoiceType, bool? isAllowedToSend, SendSystem? sendSystem, string buyerOrganizationNumber, string buyerGLN, bool? exported, bool? isAggregated, int? pageNumber, string extendBasicAuthorization)
        {
            return CustomerInvoices_GetCustomerInvoiceListAsync(client, invoiceNumber, customerNumber, ocrNumber, orderNumber, orderNumberExternal, orderNumberEndCustomer, createDate, invoiceDate, changeDateFrom, changeDateTo, dueDate, invoiceStatus, invoiceType, isAllowedToSend, sendSystem, buyerOrganizationNumber, buyerGLN, exported, isAggregated, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of customer invoices
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="invoiceNumber">Invoice number from the seller</param>
        /// <param name="customerNumber">The sellers customer number of the buyer</param>
        /// <param name="ocrNumber">The calculated payment number for the invoice, in Sweden called OCR number, in denmark FIK, in Norway KID etc, the name is different for most country, but is used for automatic identification in payment systems.</param>
        /// <param name="orderNumber">If there is a order connected to the invoice, this is the order number. For aggregated invoices order number search will not be reliable.</param>
        /// <param name="orderNumberExternal">If the buyer has added a reference number on the order. For aggregated invoices order number external search will not be reliable.</param>
        /// <param name="orderNumberEndCustomer">Additional reference number added by the buyer</param>
        /// <param name="createDate">The create date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="invoiceDate">The official invoiced date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="changeDateFrom">Change date of the invoice. Use fully qualified utc format.</param>
        /// <param name="changeDateTo">Change date of the invoice. Use fully qualified utc format.</param>
        /// <param name="dueDate">Due date of the invoice. Only date part will be used. Use fully qualified utc format.</param>
        /// <param name="invoiceStatus">The status of the invoice</param>
        /// <param name="invoiceType">Type of invoice</param>
        /// <param name="isAllowedToSend">Is the invoice in need of manual release or is it allowed to be sent automatically</param>
        /// <param name="sendSystem">Which system that are sending the invoice to the customer</param>
        /// <param name="buyerOrganizationNumber">Buyers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)</param>
        /// <param name="buyerGLN">GLN number of the buyer</param>
        /// <param name="exported">Is the invoice exported to financial/accounting system</param>
        /// <param name="isAggregated">Is the invoice aggregated, ie containing multplie orders</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerInvoiceListItemList> CustomerInvoices_GetCustomerInvoiceListAsync(string client, string invoiceNumber, string customerNumber, string ocrNumber, string orderNumber, string orderNumberExternal, string orderNumberEndCustomer, System.DateTimeOffset? createDate, System.DateTimeOffset? invoiceDate, System.DateTimeOffset? changeDateFrom, System.DateTimeOffset? changeDateTo, System.DateTimeOffset? dueDate, InvoiceStatus? invoiceStatus, InvoiceType? invoiceType, bool? isAllowedToSend, SendSystem? sendSystem, string buyerOrganizationNumber, string buyerGLN, bool? exported, bool? isAggregated, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerInvoices?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ocrNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ocrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ocrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumberExternal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumberExternal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumberExternal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumberEndCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumberEndCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumberEndCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createDate") + "=").Append(System.Uri.EscapeDataString(createDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDate") + "=").Append(System.Uri.EscapeDataString(invoiceDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (changeDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changeDateFrom") + "=").Append(System.Uri.EscapeDataString(changeDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (changeDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changeDateTo") + "=").Append(System.Uri.EscapeDataString(changeDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDate") + "=").Append(System.Uri.EscapeDataString(dueDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isAllowedToSend != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isAllowedToSend") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isAllowedToSend, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sendSystem != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sendSystem") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sendSystem, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (buyerOrganizationNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("buyerOrganizationNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(buyerOrganizationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (buyerGLN != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("buyerGLN") + "=").Append(System.Uri.EscapeDataString(ConvertToString(buyerGLN, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exported != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exported") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exported, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isAggregated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isAggregated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isAggregated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerInvoiceListItemList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single customer invoice
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The invoice number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerInvoice> CustomerInvoices_GetCustomerInvoiceAsync(string client, string id, string extendBasicAuthorization)
        {
            return CustomerInvoices_GetCustomerInvoiceAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single customer invoice
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The invoice number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerInvoice> CustomerInvoices_GetCustomerInvoiceAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerInvoices/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerInvoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get available to promise for a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrder> CustomerOrderATP_PostNewOrderATPAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization)
        {
            return CustomerOrderATP_PostNewOrderATPAsync(client, newCustomerOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available to promise for a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrder> CustomerOrderATP_PostNewOrderATPAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newCustomerOrder == null)
                throw new System.ArgumentNullException("newCustomerOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrderATP");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newCustomerOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Low)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get prices, products and discount for a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrder> CustomerOrderCampaignProcessor_CampaignProcessorPostNewOrderAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization)
        {
            return CustomerOrderCampaignProcessor_CampaignProcessorPostNewOrderAsync(client, newCustomerOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get prices, products and discount for a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrder> CustomerOrderCampaignProcessor_CampaignProcessorPostNewOrderAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newCustomerOrder == null)
                throw new System.ArgumentNullException("newCustomerOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrderCampaignProcessor");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newCustomerOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Low)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create customer invoice with data from a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerOrder">The customer order containing data for invoice</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerInvoiceResult> CustomerOrderInvoices_PostNewOrderToInvoiceAsync(string client, CustomerOrder customerOrder, string extendBasicAuthorization)
        {
            return CustomerOrderInvoices_PostNewOrderToInvoiceAsync(client, customerOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create customer invoice with data from a customer order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerOrder">The customer order containing data for invoice</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerInvoiceResult> CustomerOrderInvoices_PostNewOrderToInvoiceAsync(string client, CustomerOrder customerOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (customerOrder == null)
                throw new System.ArgumentNullException("customerOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrderInvoices");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(customerOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerInvoiceResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all customer order projects
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrderProjectList> CustomerOrderProjects_GetAllProjectsAsync(string client, string extendBasicAuthorization)
        {
            return CustomerOrderProjects_GetAllProjectsAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all customer order projects
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrderProjectList> CustomerOrderProjects_GetAllProjectsAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrderProjects");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrderProjectList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all customer order reason codes
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrderReasonCodeList> CustomerOrderReasonCodes_GetAllReasonCodeAsync(string client, string extendBasicAuthorization)
        {
            return CustomerOrderReasonCodes_GetAllReasonCodeAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all customer order reason codes
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrderReasonCodeList> CustomerOrderReasonCodes_GetAllReasonCodeAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrderReasonCodes");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrderReasonCodeList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of orders
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="orderNumber">The order number</param>
        /// <param name="orderNumberExternal">The order number specified by external system.</param>
        /// <param name="shippingNumber">Shipping number for warehouse orders. Shipping numbers for direct delivery orders are not searchable.</param>
        /// <param name="modifiedDateFrom">Order must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="pageCount">The size of page, default is 100.</param>
        /// <param name="pageOffset">The page number, default is 0 and returns the first page.</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerOrderListItem>> CustomerOrders_GetAllOrdersAsync(string client, string orderNumber, string orderNumberExternal, OrderStatus? orderStatus, SupplyMode? supplyMode, System.DateTimeOffset? orderDateFrom, System.DateTimeOffset? orderDateTo, System.DateTimeOffset? askedDeliveryDate, System.DateTimeOffset? endDate, string customerNumber, string customerName, string deliveryCountryCode, string companyGroup, string productNumber, string productName, string invoiceNumber, string warehouse, string shippingNumber, System.DateTimeOffset? modifiedDateFrom, int? pageCount, int? pageOffset, string extendBasicAuthorization)
        {
            return CustomerOrders_GetAllOrdersAsync(client, orderNumber, orderNumberExternal, orderStatus, supplyMode, orderDateFrom, orderDateTo, askedDeliveryDate, endDate, customerNumber, customerName, deliveryCountryCode, companyGroup, productNumber, productName, invoiceNumber, warehouse, shippingNumber, modifiedDateFrom, pageCount, pageOffset, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of orders
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="orderNumber">The order number</param>
        /// <param name="orderNumberExternal">The order number specified by external system.</param>
        /// <param name="shippingNumber">Shipping number for warehouse orders. Shipping numbers for direct delivery orders are not searchable.</param>
        /// <param name="modifiedDateFrom">Order must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="pageCount">The size of page, default is 100.</param>
        /// <param name="pageOffset">The page number, default is 0 and returns the first page.</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerOrderListItem>> CustomerOrders_GetAllOrdersAsync(string client, string orderNumber, string orderNumberExternal, OrderStatus? orderStatus, SupplyMode? supplyMode, System.DateTimeOffset? orderDateFrom, System.DateTimeOffset? orderDateTo, System.DateTimeOffset? askedDeliveryDate, System.DateTimeOffset? endDate, string customerNumber, string customerName, string deliveryCountryCode, string companyGroup, string productNumber, string productName, string invoiceNumber, string warehouse, string shippingNumber, System.DateTimeOffset? modifiedDateFrom, int? pageCount, int? pageOffset, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrders?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (orderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumberExternal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumberExternal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumberExternal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplyMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplyMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplyMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderDateFrom") + "=").Append(System.Uri.EscapeDataString(orderDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderDateTo") + "=").Append(System.Uri.EscapeDataString(orderDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (askedDeliveryDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("askedDeliveryDate") + "=").Append(System.Uri.EscapeDataString(askedDeliveryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryCountryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deliveryCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyGroup != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("companyGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shippingNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shippingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shippingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedDateFrom") + "=").Append(System.Uri.EscapeDataString(modifiedDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageOffset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageOffset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageOffset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerOrderListItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The new customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrder> CustomerOrders_PostNewOrderAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization)
        {
            return CustomerOrders_PostNewOrderAsync(client, newCustomerOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomerOrder">The new customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrder> CustomerOrders_PostNewOrderAsync(string client, CustomerOrder newCustomerOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newCustomerOrder == null)
                throw new System.ArgumentNullException("newCustomerOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrders");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newCustomerOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerOrder> CustomerOrders_GetOrderAsync(string client, string id, string extendBasicAuthorization)
        {
            return CustomerOrders_GetOrderAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerOrder> CustomerOrders_GetOrderAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="existingCustomerOrder">The existing customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> CustomerOrders_PutExistingOrderAsync(string client, string id, CustomerOrder existingCustomerOrder, string extendBasicAuthorization)
        {
            return CustomerOrders_PutExistingOrderAsync(client, id, existingCustomerOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="existingCustomerOrder">The existing customer order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> CustomerOrders_PutExistingOrderAsync(string client, string id, CustomerOrder existingCustomerOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (existingCustomerOrder == null)
                throw new System.ArgumentNullException("existingCustomerOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingCustomerOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> CustomerOrders_DeleteOrderAsync(string client, string id, string extendBasicAuthorization)
        {
            return CustomerOrders_DeleteOrderAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> CustomerOrders_DeleteOrderAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/CustomerOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a customer list
        /// </summary>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="customerNumberSearch">Customer number search</param>
        /// <param name="name">Name</param>
        /// <param name="lastName">Last name</param>
        /// <param name="organizationNumber">Organization number</param>
        /// <param name="email2">Email</param>
        /// <param name="phoneNumber2">Phone number</param>
        /// <param name="deliveryAddress1">Delivery address</param>
        /// <param name="deliveryPostalCode">Delivery postal code</param>
        /// <param name="deliveryCity">Delivery city</param>
        /// <param name="changedAfterDate">Return only customers changed after this date</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerListItemList> Customers_GetCustomersAsync(string client, string customerNumber, string customerNumberSearch, string name, string lastName, string organizationNumber, string email2, string phoneNumber2, string deliveryAddress1, string deliveryPostalCode, string deliveryCity, System.DateTimeOffset? changedAfterDate, Incoterms? incoterms, int? pageNumber, string extendBasicAuthorization)
        {
            return Customers_GetCustomersAsync(client, customerNumber, customerNumberSearch, name, lastName, organizationNumber, email2, phoneNumber2, deliveryAddress1, deliveryPostalCode, deliveryCity, changedAfterDate, incoterms, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a customer list
        /// </summary>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="customerNumberSearch">Customer number search</param>
        /// <param name="name">Name</param>
        /// <param name="lastName">Last name</param>
        /// <param name="organizationNumber">Organization number</param>
        /// <param name="email2">Email</param>
        /// <param name="phoneNumber2">Phone number</param>
        /// <param name="deliveryAddress1">Delivery address</param>
        /// <param name="deliveryPostalCode">Delivery postal code</param>
        /// <param name="deliveryCity">Delivery city</param>
        /// <param name="changedAfterDate">Return only customers changed after this date</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerListItemList> Customers_GetCustomersAsync(string client, string customerNumber, string customerNumberSearch, string name, string lastName, string organizationNumber, string email2, string phoneNumber2, string deliveryAddress1, string deliveryPostalCode, string deliveryCity, System.DateTimeOffset? changedAfterDate, Incoterms? incoterms, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Customers?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNumberSearch != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumberSearch") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumberSearch, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organizationNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organizationNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organizationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phoneNumber2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phoneNumber2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phoneNumber2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryAddress1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deliveryAddress1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryAddress1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryPostalCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deliveryPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryCity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deliveryCity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryCity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (changedAfterDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changedAfterDate") + "=").Append(System.Uri.EscapeDataString(changedAfterDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incoterms != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("incoterms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(incoterms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerListItemList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomer">Info for creating new customer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Customer> Customers_PostNewCustomerAsync(string client, Customer newCustomer, string extendBasicAuthorization)
        {
            return Customers_PostNewCustomerAsync(client, newCustomer, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newCustomer">Info for creating new customer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Customer> Customers_PostNewCustomerAsync(string client, Customer newCustomer, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newCustomer == null)
                throw new System.ArgumentNullException("newCustomer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Customers");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newCustomer, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Customer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single customer
        /// </summary>
        /// <param name="client">The shortname for the client</param>
        /// <param name="id">The customer number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Customer> Customers_GetCustomerAsync(string client, string id, string extendBasicAuthorization)
        {
            return Customers_GetCustomerAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single customer
        /// </summary>
        /// <param name="client">The shortname for the client</param>
        /// <param name="id">The customer number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Customer> Customers_GetCustomerAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Customers/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Customer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a customer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The customer number</param>
        /// <param name="existingCustomer">The existing customer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Customer> Customers_PutExistingCustomerAsync(string client, string id, Customer existingCustomer, string extendBasicAuthorization)
        {
            return Customers_PutExistingCustomerAsync(client, id, existingCustomer, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The customer number</param>
        /// <param name="existingCustomer">The existing customer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Customer> Customers_PutExistingCustomerAsync(string client, string id, Customer existingCustomer, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (existingCustomer == null)
                throw new System.ArgumentNullException("existingCustomer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Customers/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingCustomer, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Customer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a generic report
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="reportId">The reportId. Get this from support.</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GenericReports_GetListAsync(string client, System.Guid reportId, string extendBasicAuthorization)
        {
            return GenericReports_GetListAsync(client, reportId, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a generic report
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="reportId">The reportId. Get this from support.</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GenericReports_GetListAsync(string client, System.Guid reportId, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (reportId == null)
                throw new System.ArgumentNullException("reportId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/GenericReports?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("reportId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Low)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a new gtin
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GTIN> GTINs_GetNewGTINAsync(string client, string extendBasicAuthorization)
        {
            return GTINs_GetNewGTINAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a new gtin
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GTIN> GTINs_GetNewGTINAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/internal_v1_0/{client}/GTINs");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GTIN>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of offers
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="offerNumber">The offer number</param>
        /// <param name="offerStatus">Status of the offer</param>
        /// <param name="offerDateFrom">Offer create date from. Use fully qualified utc format.</param>
        /// <param name="offerDateTo">Offer create date to. Use fully qualified utc format.</param>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="customerName">Customer name</param>
        /// <param name="orderNumber">Order number as a result of an approved offer</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OfferListItemList> Offers_GetAllOffersAsync(string client, string offerNumber, OfferStatus? offerStatus, System.DateTimeOffset? offerDateFrom, System.DateTimeOffset? offerDateTo, string customerNumber, string customerName, string orderNumber, int? pageNumber, string extendBasicAuthorization)
        {
            return Offers_GetAllOffersAsync(client, offerNumber, offerStatus, offerDateFrom, offerDateTo, customerNumber, customerName, orderNumber, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of offers
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="offerNumber">The offer number</param>
        /// <param name="offerStatus">Status of the offer</param>
        /// <param name="offerDateFrom">Offer create date from. Use fully qualified utc format.</param>
        /// <param name="offerDateTo">Offer create date to. Use fully qualified utc format.</param>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="customerName">Customer name</param>
        /// <param name="orderNumber">Order number as a result of an approved offer</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OfferListItemList> Offers_GetAllOffersAsync(string client, string offerNumber, OfferStatus? offerStatus, System.DateTimeOffset? offerDateFrom, System.DateTimeOffset? offerDateTo, string customerNumber, string customerName, string orderNumber, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Offers?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (offerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offerStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offerStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offerStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offerDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offerDateFrom") + "=").Append(System.Uri.EscapeDataString(offerDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offerDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offerDateTo") + "=").Append(System.Uri.EscapeDataString(offerDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferListItemList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single offer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The offer number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Offer> Offers_GetOfferAsync(string client, string id, string extendBasicAuthorization)
        {
            return Offers_GetOfferAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single offer
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The offer number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Offer> Offers_GetOfferAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Offers/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an offer - Change Offer status Or add business messages
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The offer number</param>
        /// <param name="existingOffer">The existing customer offer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> Offers_PutExistingOfferAsync(string client, string id, Offer existingOffer, string extendBasicAuthorization)
        {
            return Offers_PutExistingOfferAsync(client, id, existingOffer, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an offer - Change Offer status Or add business messages
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The offer number</param>
        /// <param name="existingOffer">The existing customer offer</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> Offers_PutExistingOfferAsync(string client, string id, Offer existingOffer, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (existingOffer == null)
                throw new System.ArgumentNullException("existingOffer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Offers/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingOffer, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a  product availability.
        /// </summary>
        /// <param name="warehouse">The Warehouse</param>
        /// <param name="productNumber">Product Number</param>
        /// <param name="modifiedDateFrom">Availability must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductAvailabilityList> ProductAvailability_GetProductAvailabilityAsync(string client, string warehouse, string productNumber, System.DateTimeOffset? modifiedDateFrom, int? pageNumber, string extendBasicAuthorization)
        {
            return ProductAvailability_GetProductAvailabilityAsync(client, warehouse, productNumber, modifiedDateFrom, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a  product availability.
        /// </summary>
        /// <param name="warehouse">The Warehouse</param>
        /// <param name="productNumber">Product Number</param>
        /// <param name="modifiedDateFrom">Availability must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductAvailabilityList> ProductAvailability_GetProductAvailabilityAsync(string client, string warehouse, string productNumber, System.DateTimeOffset? modifiedDateFrom, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductAvailability?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (warehouse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedDateFrom") + "=").Append(System.Uri.EscapeDataString(modifiedDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductAvailabilityList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a product texts and descriptions
        /// </summary>
        /// <param name="client">Client shortname</param>
        /// <param name="id">Product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductDescriptionList> ProductDescriptions_GetProductDescriptionsAsync(string client, string id, string extendBasicAuthorization)
        {
            return ProductDescriptions_GetProductDescriptionsAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a product texts and descriptions
        /// </summary>
        /// <param name="client">Client shortname</param>
        /// <param name="id">Product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductDescriptionList> ProductDescriptions_GetProductDescriptionsAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductDescriptions?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductDescriptionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new product text
        /// </summary>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductDescriptionList> ProductDescriptions_PostNewProductDescriptionAsync(string client, ProductDescriptionList newProductDescriptionList, string extendBasicAuthorization)
        {
            return ProductDescriptions_PostNewProductDescriptionAsync(client, newProductDescriptionList, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new product text
        /// </summary>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductDescriptionList> ProductDescriptions_PostNewProductDescriptionAsync(string client, ProductDescriptionList newProductDescriptionList, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newProductDescriptionList == null)
                throw new System.ArgumentNullException("newProductDescriptionList");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductDescriptions");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newProductDescriptionList, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductDescriptionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a product description
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">Product number</param>
        /// <param name="textType">Text type</param>
        /// <param name="language">Language short code</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductDescriptions_DeleteProductDescriptionsAsync(string client, string productNumber, string textType, string language, string extendBasicAuthorization)
        {
            return ProductDescriptions_DeleteProductDescriptionsAsync(client, productNumber, textType, language, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product description
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">Product number</param>
        /// <param name="textType">Text type</param>
        /// <param name="language">Language short code</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductDescriptions_DeleteProductDescriptionsAsync(string client, string productNumber, string textType, string language, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            if (textType == null)
                throw new System.ArgumentNullException("textType");

            if (language == null)
                throw new System.ArgumentNullException("language");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductDescriptions/{productNumber}/{textType}/{language}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{productNumber}", System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{textType}", System.Uri.EscapeDataString(ConvertToString(textType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{language}", System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of products with prices
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerNumber">The customer number</param>
        /// <param name="currency">The currency</param>
        /// <param name="productNumberList">The list of product numbers, max 10</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductPriceList> ProductPrices_GetAllProductPricesAsync(string client, string customerNumber, string currency, System.Collections.Generic.IEnumerable<string> productNumberList, int? pageNumber, string extendBasicAuthorization)
        {
            return ProductPrices_GetAllProductPricesAsync(client, customerNumber, currency, productNumberList, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of products with prices
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="customerNumber">The customer number</param>
        /// <param name="currency">The currency</param>
        /// <param name="productNumberList">The list of product numbers, max 10</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductPriceList> ProductPrices_GetAllProductPricesAsync(string client, string customerNumber, string currency, System.Collections.Generic.IEnumerable<string> productNumberList, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (customerNumber == null)
                throw new System.ArgumentNullException("customerNumber");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductPrices?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (currency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productNumberList != null)
            {
                foreach (var item_ in productNumberList) { urlBuilder_.Append(System.Uri.EscapeDataString("productNumberList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductPriceList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a  list product properties.
        /// </summary>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductProperty>> ProductProperties_GetAllProductPropertiesAsync(string client, string extendBasicAuthorization)
        {
            return ProductProperties_GetAllProductPropertiesAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a  list product properties.
        /// </summary>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductProperty>> ProductProperties_GetAllProductPropertiesAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/internal_v1_0/{client}/ProductProperties");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductProperty>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of connected product properties.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">Product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductProperty>> ProductProperties_GetConnectedProductPropertiesAsync(string client, string id, string extendBasicAuthorization)
        {
            return ProductProperties_GetConnectedProductPropertiesAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of connected product properties.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">Product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductProperty>> ProductProperties_GetConnectedProductPropertiesAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/internal_v1_0/{client}/ProductProperties/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductProperty>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Save a new  connected product property
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">Product number</param>
        /// <param name="id2">The product property value</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductProperties_PostNewConnectedProductPropertyAsync(string client, string id, System.Guid id2, string extendBasicAuthorization)
        {
            return ProductProperties_PostNewConnectedProductPropertyAsync(client, id, id2, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Save a new  connected product property
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">Product number</param>
        /// <param name="id2">The product property value</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductProperties_PostNewConnectedProductPropertyAsync(string client, string id, System.Guid id2, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (id2 == null)
                throw new System.ArgumentNullException("id2");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/internal_v1_0/{client}/ProductProperties/{id}/{id2}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id2}", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a  connected product property
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The product property value</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductProperties_DeleteConnectedProductPropertyAsync(string client, string id, System.Guid id2, string extendBasicAuthorization)
        {
            return ProductProperties_DeleteConnectedProductPropertyAsync(client, id, id2, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a  connected product property
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The product property value</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductProperties_DeleteConnectedProductPropertyAsync(string client, string id, System.Guid id2, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (id2 == null)
                throw new System.ArgumentNullException("id2");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/internal_v1_0/{client}/ProductProperties/{id}/{id2}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id2}", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of products
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="productName">The name of the product</param>
        /// <param name="supplyMode">The supply mode</param>
        /// <param name="modifiedDateFrom">Product must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="modifiedDateTo">Product must have been modified before this date</param>
        /// <param name="warehouse">Shortname of warehouse</param>
        /// <param name="pageCount">The size of page, default is 100</param>
        /// <param name="pageOffset">The page number, default is 0 and returns the first page</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductListItem>> Products_GetAllProductsAsync(string client, string productNumber, string productName, SupplyMode2? supplyMode, string supplierNumber, string supplierProductNumber, System.DateTimeOffset? modifiedDateFrom, System.DateTimeOffset? modifiedDateTo, string warehouse, int? pageCount, int? pageOffset, string extendBasicAuthorization)
        {
            return Products_GetAllProductsAsync(client, productNumber, productName, supplyMode, supplierNumber, supplierProductNumber, modifiedDateFrom, modifiedDateTo, warehouse, pageCount, pageOffset, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of products
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="productName">The name of the product</param>
        /// <param name="supplyMode">The supply mode</param>
        /// <param name="modifiedDateFrom">Product must have been modified after this date. Use fully qualified utc format.</param>
        /// <param name="modifiedDateTo">Product must have been modified before this date</param>
        /// <param name="warehouse">Shortname of warehouse</param>
        /// <param name="pageCount">The size of page, default is 100</param>
        /// <param name="pageOffset">The page number, default is 0 and returns the first page</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductListItem>> Products_GetAllProductsAsync(string client, string productNumber, string productName, SupplyMode2? supplyMode, string supplierNumber, string supplierProductNumber, System.DateTimeOffset? modifiedDateFrom, System.DateTimeOffset? modifiedDateTo, string warehouse, int? pageCount, int? pageOffset, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Products?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplyMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplyMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplyMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplierNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplierNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplierNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplierProductNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplierProductNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplierProductNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedDateFrom") + "=").Append(System.Uri.EscapeDataString(modifiedDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedDateTo") + "=").Append(System.Uri.EscapeDataString(modifiedDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageOffset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageOffset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageOffset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductListItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newProduct">The new product</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> Products_PostNewProductAsync(string client, Product newProduct, string extendBasicAuthorization)
        {
            return Products_PostNewProductAsync(client, newProduct, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newProduct">The new product</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> Products_PostNewProductAsync(string client, Product newProduct, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newProduct == null)
                throw new System.ArgumentNullException("newProduct");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Products");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newProduct, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single product.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The productNumber</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Product> Products_GetProductAsync(string client, string id, string extendBasicAuthorization)
        {
            return Products_GetProductAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single product.
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The productNumber</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Product> Products_GetProductAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Products/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Product>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="existingProduct">The existing product</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> Products_PutExistingProductAsync(string client, string id, Product existingProduct, string extendBasicAuthorization)
        {
            return Products_PutExistingProductAsync(client, id, existingProduct, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="existingProduct">The existing product</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> Products_PutExistingProductAsync(string client, string id, Product existingProduct, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (existingProduct == null)
                throw new System.ArgumentNullException("existingProduct");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Products/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingProduct, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> Products_DeleteProductAsync(string client, string id, string extendBasicAuthorization)
        {
            return Products_DeleteProductAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> Products_DeleteProductAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/Products/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of product supplier agreements
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="supplierAgreementNumber">The supplier agreement number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductSupplierAgreementList> ProductSupplierAgreements_GetAllProductSupplierAgreementsAsync(string client, string productNumber, int? supplierAgreementNumber, int? pageNumber, string extendBasicAuthorization)
        {
            return ProductSupplierAgreements_GetAllProductSupplierAgreementsAsync(client, productNumber, supplierAgreementNumber, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of product supplier agreements
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="supplierAgreementNumber">The supplier agreement number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductSupplierAgreementList> ProductSupplierAgreements_GetAllProductSupplierAgreementsAsync(string client, string productNumber, int? supplierAgreementNumber, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductSupplierAgreements?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplierAgreementNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplierAgreementNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplierAgreementNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductSupplierAgreementList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = No limit)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newProductSupplierAgreement">The new product supplier agreement</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_PostNewProductSupplierAgreementAsync(string client, ProductSupplierAgreement newProductSupplierAgreement, string extendBasicAuthorization)
        {
            return ProductSupplierAgreements_PostNewProductSupplierAgreementAsync(client, newProductSupplierAgreement, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newProductSupplierAgreement">The new product supplier agreement</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_PostNewProductSupplierAgreementAsync(string client, ProductSupplierAgreement newProductSupplierAgreement, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newProductSupplierAgreement == null)
                throw new System.ArgumentNullException("newProductSupplierAgreement");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductSupplierAgreements");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newProductSupplierAgreement, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductSupplierAgreement> ProductSupplierAgreements_GetProductSupplierAgreementAsync(string client, string id, string id2, string extendBasicAuthorization)
        {
            return ProductSupplierAgreements_GetProductSupplierAgreementAsync(client, id, id2, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductSupplierAgreement> ProductSupplierAgreements_GetProductSupplierAgreementAsync(string client, string id, string id2, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (id2 == null)
                throw new System.ArgumentNullException("id2");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductSupplierAgreements/{id}/{id2}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id2}", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductSupplierAgreement>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = No limit)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="existingProductSupplierAgreement">The existing product supplier agreement</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_PutExistingProductSupplierAgreementAsync(string client, string id, string id2, ProductSupplierAgreement existingProductSupplierAgreement, string extendBasicAuthorization)
        {
            return ProductSupplierAgreements_PutExistingProductSupplierAgreementAsync(client, id, id2, existingProductSupplierAgreement, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="existingProductSupplierAgreement">The existing product supplier agreement</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_PutExistingProductSupplierAgreementAsync(string client, string id, string id2, ProductSupplierAgreement existingProductSupplierAgreement, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (id2 == null)
                throw new System.ArgumentNullException("id2");

            if (existingProductSupplierAgreement == null)
                throw new System.ArgumentNullException("existingProductSupplierAgreement");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductSupplierAgreements/{id}/{id2}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id2}", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingProductSupplierAgreement, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_DeleteProductSupplierAsync(string client, string id, string id2, string extendBasicAuthorization)
        {
            return ProductSupplierAgreements_DeleteProductSupplierAsync(client, id, id2, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product supplier agreement
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The product number</param>
        /// <param name="id2">The supplier agreement number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> ProductSupplierAgreements_DeleteProductSupplierAsync(string client, string id, string id2, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (id2 == null)
                throw new System.ArgumentNullException("id2");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductSupplierAgreements/{id}/{id2}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id2}", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of product units
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductUnit>> ProductUnits_GetAllProductUnitsAsync(string client, string extendBasicAuthorization)
        {
            return ProductUnits_GetAllProductUnitsAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of product units
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductUnit>> ProductUnits_GetAllProductUnitsAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ProductUnits");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductUnit>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of purchase orders
        /// </summary>
        /// <param name="purchaseNumber">The purchase number</param>
        /// <param name="createDateFrom">Create date from</param>
        /// <param name="createDateTo">Create date to</param>
        /// <param name="warehouse">Warehouse</param>
        /// <param name="isOpen">Get only open purchases</param>
        /// <param name="isReceived">Get only purchases with something received</param>
        /// <param name="externalOrderNumber">Purchase number from external system</param>
        /// <param name="supplierNumber">Supplier number</param>
        /// <param name="supplierOrderNumber">Purchase number used by supplier</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseOrderListItemList> PurchaseOrders_GetPurchaseOrderListAsync(string client, string purchaseNumber, System.DateTimeOffset? createDateFrom, System.DateTimeOffset? createDateTo, string warehouse, bool? isOpen, bool? isReceived, string externalOrderNumber, string supplierNumber, string supplierOrderNumber, int? pageNumber, string extendBasicAuthorization)
        {
            return PurchaseOrders_GetPurchaseOrderListAsync(client, purchaseNumber, createDateFrom, createDateTo, warehouse, isOpen, isReceived, externalOrderNumber, supplierNumber, supplierOrderNumber, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of purchase orders
        /// </summary>
        /// <param name="purchaseNumber">The purchase number</param>
        /// <param name="createDateFrom">Create date from</param>
        /// <param name="createDateTo">Create date to</param>
        /// <param name="warehouse">Warehouse</param>
        /// <param name="isOpen">Get only open purchases</param>
        /// <param name="isReceived">Get only purchases with something received</param>
        /// <param name="externalOrderNumber">Purchase number from external system</param>
        /// <param name="supplierNumber">Supplier number</param>
        /// <param name="supplierOrderNumber">Purchase number used by supplier</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderListItemList> PurchaseOrders_GetPurchaseOrderListAsync(string client, string purchaseNumber, System.DateTimeOffset? createDateFrom, System.DateTimeOffset? createDateTo, string warehouse, bool? isOpen, bool? isReceived, string externalOrderNumber, string supplierNumber, string supplierOrderNumber, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/PurchaseOrders?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (purchaseNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createDateFrom") + "=").Append(System.Uri.EscapeDataString(createDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createDateTo") + "=").Append(System.Uri.EscapeDataString(createDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOpen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOpen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOpen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isReceived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsReceived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isReceived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalOrderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("externalOrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalOrderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplierNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplierNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplierNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplierOrderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("supplierOrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplierOrderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderListItemList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newPurchaseOrder">Info for creating new purchase order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseOrder> PurchaseOrders_PostNewPurchaseOrderAsync(string client, PurchaseOrder newPurchaseOrder, string extendBasicAuthorization)
        {
            return PurchaseOrders_PostNewPurchaseOrderAsync(client, newPurchaseOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newPurchaseOrder">Info for creating new purchase order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrder> PurchaseOrders_PostNewPurchaseOrderAsync(string client, PurchaseOrder newPurchaseOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newPurchaseOrder == null)
                throw new System.ArgumentNullException("newPurchaseOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/PurchaseOrders");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(newPurchaseOrder, _settings.Value));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newPurchaseOrder, _settings.Value);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The purchase order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseOrder> PurchaseOrders_GetPurchaseOrderAsync(string client, string id, string extendBasicAuthorization)
        {
            return PurchaseOrders_GetPurchaseOrderAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The purchase order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrder> PurchaseOrders_GetPurchaseOrderAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/PurchaseOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The purchase order number</param>
        /// <param name="existingPurchaseOrder">The existing purchase order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> PurchaseOrders_PutExistingPurchaseOrderAsync(string client, string id, PurchaseOrder existingPurchaseOrder, string extendBasicAuthorization)
        {
            return PurchaseOrders_PutExistingPurchaseOrderAsync(client, id, existingPurchaseOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update purchase order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The purchase order number</param>
        /// <param name="existingPurchaseOrder">The existing purchase order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> PurchaseOrders_PutExistingPurchaseOrderAsync(string client, string id, PurchaseOrder existingPurchaseOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (existingPurchaseOrder == null)
                throw new System.ArgumentNullException("existingPurchaseOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/PurchaseOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(existingPurchaseOrder, _settings.Value));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(existingPurchaseOrder, _settings.Value);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all return order row codes
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReturnOrderRowCodeList> ReturnOrderRowCodes_GetAllReturnOrderRowCodesAsync(string client, string extendBasicAuthorization)
        {
            return ReturnOrderRowCodes_GetAllReturnOrderRowCodesAsync(client, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all return order row codes
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReturnOrderRowCodeList> ReturnOrderRowCodes_GetAllReturnOrderRowCodesAsync(string client, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ReturnOrderRowCodes");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnOrderRowCodeList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = High)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of return orders
        /// </summary>
        /// <param name="returnNumber">The return number</param>
        /// <param name="createDateFrom">Create date from</param>
        /// <param name="createDateTo">Create date to</param>
        /// <param name="referenceOrderNumber">Reference order number</param>
        /// <param name="warehouse">Warehouse</param>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="isOpen">Get only open returns</param>
        /// <param name="isReceived">Get only returns with something received</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReturnOrderListItemList> ReturnOrders_GetReturnOrderListAsync(string client, string returnNumber, System.DateTimeOffset? createDateFrom, System.DateTimeOffset? createDateTo, string referenceOrderNumber, string warehouse, string customerNumber, bool? isOpen, bool? isReceived, int? pageNumber, string extendBasicAuthorization)
        {
            return ReturnOrders_GetReturnOrderListAsync(client, returnNumber, createDateFrom, createDateTo, referenceOrderNumber, warehouse, customerNumber, isOpen, isReceived, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of return orders
        /// </summary>
        /// <param name="returnNumber">The return number</param>
        /// <param name="createDateFrom">Create date from</param>
        /// <param name="createDateTo">Create date to</param>
        /// <param name="referenceOrderNumber">Reference order number</param>
        /// <param name="warehouse">Warehouse</param>
        /// <param name="customerNumber">Customer number</param>
        /// <param name="isOpen">Get only open returns</param>
        /// <param name="isReceived">Get only returns with something received</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReturnOrderListItemList> ReturnOrders_GetReturnOrderListAsync(string client, string returnNumber, System.DateTimeOffset? createDateFrom, System.DateTimeOffset? createDateTo, string referenceOrderNumber, string warehouse, string customerNumber, bool? isOpen, bool? isReceived, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ReturnOrders?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            if (returnNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createDateFrom") + "=").Append(System.Uri.EscapeDataString(createDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createDateTo") + "=").Append(System.Uri.EscapeDataString(createDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (referenceOrderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceOrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceOrderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOpen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOpen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOpen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isReceived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsReceived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isReceived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnOrderListItemList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new return order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newReturnOrder">Info for creating new return order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReturnOrder> ReturnOrders_PostNewReturnOrderAsync(string client, ReturnOrder newReturnOrder, string extendBasicAuthorization)
        {
            return ReturnOrders_PostNewReturnOrderAsync(client, newReturnOrder, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new return order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="newReturnOrder">Info for creating new return order</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReturnOrder> ReturnOrders_PostNewReturnOrderAsync(string client, ReturnOrder newReturnOrder, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (newReturnOrder == null)
                throw new System.ArgumentNullException("newReturnOrder");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ReturnOrders");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(newReturnOrder, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a single return order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The return order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReturnOrder> ReturnOrders_GetReturnOrderAsync(string client, string id, string extendBasicAuthorization)
        {
            return ReturnOrders_GetReturnOrderAsync(client, id, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a single return order
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="id">The return order number</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReturnOrder> ReturnOrders_GetReturnOrderAsync(string client, string id, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/ReturnOrders/{id}");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list with balances for a specific warehouse.
        /// </summary>
        /// <param name="warehouse">The warehouse</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockLevelList> WarehouseStockLevels_GetWarehouseStocklevelsAsync(string client, string warehouse, string productNumber, int? pageNumber, string extendBasicAuthorization)
        {
            return WarehouseStockLevels_GetWarehouseStocklevelsAsync(client, warehouse, productNumber, pageNumber, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list with balances for a specific warehouse.
        /// </summary>
        /// <param name="warehouse">The warehouse</param>
        /// <param name="productNumber">The product number</param>
        /// <param name="pageNumber">The number of the page. First page is 1. Default is 1</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockLevelList> WarehouseStockLevels_GetWarehouseStocklevelsAsync(string client, string warehouse, string productNumber, int? pageNumber, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (warehouse == null)
                throw new System.ArgumentNullException("warehouse");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/WarehouseStockLevels?");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("warehouse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (productNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockLevelList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adjust product balance
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> WarehouseStockLevels_AdjustBalanceAsync(string client, StockLevelAdjust stockLevelAdjust, string extendBasicAuthorization)
        {
            return WarehouseStockLevels_AdjustBalanceAsync(client, stockLevelAdjust, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adjust product balance
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> WarehouseStockLevels_AdjustBalanceAsync(string client, StockLevelAdjust stockLevelAdjust, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (stockLevelAdjust == null)
                throw new System.ArgumentNullException("stockLevelAdjust");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/WarehouseStockLevels");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(stockLevelAdjust, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set product balance
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomSuccess> WarehouseStockLevels_SetBalanceAsync(string client, StockLevel stockLevel, string extendBasicAuthorization)
        {
            return WarehouseStockLevels_SetBalanceAsync(client, stockLevel, extendBasicAuthorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set product balance
        /// </summary>
        /// <param name="client">The client</param>
        /// <param name="extendBasicAuthorization">Header containing basic auth information</param>
        /// <exception cref="ExtendSharpException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomSuccess> WarehouseStockLevels_SetBalanceAsync(string client, StockLevel stockLevel, string extendBasicAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (client == null)
                throw new System.ArgumentNullException("client");

            if (stockLevel == null)
                throw new System.ArgumentNullException("stockLevel");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1_0/{client}/WarehouseStockLevels");
            urlBuilder_.Replace("{client}", System.Uri.EscapeDataString(ConvertToString(client, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (extendBasicAuthorization != null)
                        request_.Headers.TryAddWithoutValidation("ExtendBasicAuthorization", ConvertToString(extendBasicAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(stockLevel, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ExtendSharpException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("BadRequest", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("Too many requests. (Rate limit = Standard)", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ExtendSharpException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ExtendSharpException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ExtendSharpException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The Search Parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AgreedOrderAvailabilitySearchParameters
    {
        /// <summary>
        /// Customer Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Agreed Order Availability List
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AgreedOrderAvailabilityList
    {
        /// <summary>
        /// The product price item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agreedOrderAvailabilityList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AgreedOrderAvailability> AgreedOrderAvailabilityList1 { get; set; } = new List<AgreedOrderAvailability>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationInformation PaginationInfo { get; set; }

    }

    /// <summary>
    /// Agreed Order Availability
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AgreedOrderAvailability
    {
        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Corporate id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId { get; set; }

        /// <summary>
        /// List of orders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agreedOrders", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AgreedOrderAvailabilityOrder> AgreedOrders { get; set; } = new List<AgreedOrderAvailabilityOrder>();

    }

    /// <summary>
    /// Pagination information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PaginationInformation
    {
        /// <summary>
        /// Current page, starting from 1. Each page can contain max 100 resources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Total pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.Always)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Page size is normally 100
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Always)]
        public int PageSize { get; set; }

        /// <summary>
        /// Total number of resources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResources", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResources { get; set; }

        /// <summary>
        /// Message text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AgreedOrderAvailabilityOrder
    {
        /// <summary>
        /// Order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Order date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        /// <summary>
        /// Ordered by customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedByCustomer ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderedByCustomer_ { get; set; }

        [Newtonsoft.Json.JsonProperty("isCustomerOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCustomerOwned { get; set; }

        [Newtonsoft.Json.JsonProperty("isFixedPriceAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedPriceAgreement { get; set; }

        [Newtonsoft.Json.JsonProperty("isForCompanyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForCompanyGroup { get; set; }

        /// <summary>
        /// List of rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AgreedOrderAvailabilityOrderRow> Rows { get; set; } = new List<AgreedOrderAvailabilityOrderRow>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AgreedOrderAvailabilityOrderRow
    {
        /// <summary>
        /// (Output) The posistion on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        /// <summary>
        /// the sub position, used if row was partialied delivered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        /// <summary>
        /// Product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Product name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Sales data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnitWithPrice SalesData { get; set; }

        /// <summary>
        /// Delivery data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnitWithPrice DeliveryData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class QuantityAndUnitWithPrice
    {
        /// <summary>
        /// The quantity expressed in current unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        /// <summary>
        /// The sales unit which defines which unit is being sold
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        /// <summary>
        /// The price per sales unit, VAT excluded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The VAT percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// Currency for the unitPrice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Input only. Set your internal cost explicitly. Available only for supply mode DirectDelivery, Service and Freight.
        /// <br/>This cost must be expressed in your base currency which could differ from the currency on the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitExplicitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitExplicitCost { get; set; }

    }

    /// <summary>
    /// The Search Parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BalanceAdjustmentSearchParameters
    {
        /// <summary>
        /// Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Balance adjustment must have been modified after this date. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDateFrom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDateFrom { get; set; }

        /// <summary>
        /// Balance adjusted before this date. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDateTo { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Balance adjustment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BalanceAdjustmentListItem
    {
        /// <summary>
        /// Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Event date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BalanceAdjustmentListItemEventType EventType { get; set; }

        /// <summary>
        /// Balance change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceChange", Required = Newtonsoft.Json.Required.Always)]
        public int BalanceChange { get; set; }

        /// <summary>
        /// New balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newBalance", Required = Newtonsoft.Json.Required.Always)]
        public int NewBalance { get; set; }

        /// <summary>
        /// Blocked balance change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockedBalanceChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlockedBalanceChange { get; set; }

        /// <summary>
        /// (Output) Details about units. Batch number, serial number and best before date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BalanceAdjustmentUnit> UnitDetails { get; set; }

        /// <summary>
        /// Notes
        /// <br/>&lt;History Author="Ubaid Ahmed" Date="2022-03-08" Version="9.3" Branch="vNext" Task="EBEDEV-2123"&gt;&lt;/History&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BalanceAdjustmentUnit
    {
        /// <summary>
        /// (Output) Quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// (Output) Serial number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// (Output) Batch number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// (Output) Best before date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bestBeforeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BestBeforeDate { get; set; }

    }

    /// <summary>
    /// Country
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Country
    {
        /// <summary>
        /// The country id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 2)]
        public string CountryId { get; set; }

        /// <summary>
        /// The country name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Currency from comment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Currency
    {
        /// <summary>
        /// The currency id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// The currency name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Search parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceListSearchParameters
    {
        /// <summary>
        /// Invoice number from the seller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The sellers customer number of the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The calculated payment number for the invoice, in Sweden called OCR number, in denmark FIK, in Norway KID etc, the name is different for most country, but is used for automatic identification in payment systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ocrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OcrNumber { get; set; }

        /// <summary>
        /// If there is a order connected to the invoice, this is the order number. For aggregated invoices order number search will not be reliable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// If the buyer has added a reference number on the order. For aggregated invoices order number external search will not be reliable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        /// <summary>
        /// Additional reference number added by the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberEndCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberEndCustomer { get; set; }

        /// <summary>
        /// The create date of the invoice. Only date part will be used. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// The official invoiced date of the invoice. Only date part will be used. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate { get; set; }

        /// <summary>
        /// Change date of the invoice. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDateFrom { get; set; }

        /// <summary>
        /// Change date of the invoice. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDateTo { get; set; }

        /// <summary>
        /// Due date of the invoice. Only date part will be used. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// The status of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListSearchParametersInvoiceStatus? InvoiceStatus { get; set; }

        /// <summary>
        /// Type of invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListSearchParametersInvoiceType? InvoiceType { get; set; }

        /// <summary>
        /// Is the invoice in need of manual release or is it allowed to be sent automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAllowedToSend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllowedToSend { get; set; }

        /// <summary>
        /// Which system that are sending the invoice to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListSearchParametersSendSystem? SendSystem { get; set; }

        /// <summary>
        /// Buyers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerOrganizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerOrganizationNumber { get; set; }

        /// <summary>
        /// GLN number of the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerGLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerGLN { get; set; }

        /// <summary>
        /// Is the invoice exported to financial/accounting system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exported { get; set; }

        /// <summary>
        /// Is the invoice aggregated, ie containing multplie orders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAggregated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAggregated { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Customer invoice list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceListItemList
    {
        /// <summary>
        /// The customer invoice list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerInvoiceListItem> CustomerInvoiceList { get; set; } = new List<CustomerInvoiceListItem>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    /// <summary>
    /// Return orders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceListItem
    {
        /// <summary>
        /// Invoice number from the seller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The sellers customer number of the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The calculated payment number for the invoice, in Sweden called OCR number, in denmark FIK, in Norway KID etc, the name is different for most country, but is used for automatic identification in payment systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ocrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OcrNumber { get; set; }

        /// <summary>
        /// If there is an order connected to the invoice, this is the order number. For aggregated invoices only one order number will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// If the buyer has added a reference number on the order. For aggregated invoices only one reference number will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        /// <summary>
        /// Additional reference number added by the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberEndCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberEndCustomer { get; set; }

        /// <summary>
        /// The sellers reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OurReference { get; set; }

        /// <summary>
        /// The order date from the order linked to the invoice. For aggregated invoices only one order date will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        /// <summary>
        /// The create date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// The official invoiced date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset InvoiceDate { get; set; }

        /// <summary>
        /// Change date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// Due date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// The original due date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalDueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OriginalDueDate { get; set; }

        /// <summary>
        /// The pay date of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PayDate { get; set; }

        /// <summary>
        /// The status of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListItemInvoiceStatus InvoiceStatus { get; set; }

        /// <summary>
        /// Type of invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListItemInvoiceType InvoiceType { get; set; }

        /// <summary>
        /// E-mail address on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

        /// <summary>
        /// The format the invoice will be sent in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListItemSendFormat SendFormat { get; set; }

        /// <summary>
        /// Is the invoice in need of manual release or is it allowed to be sent automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAllowedToSend", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAllowedToSend { get; set; }

        /// <summary>
        /// The system that is sending the invoice to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendSystem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceListItemSendSystem SendSystem { get; set; }

        /// <summary>
        /// Buyers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerOrganizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerOrganizationNumber { get; set; }

        /// <summary>
        /// EU VAT number, (often starts with country 2 digits like SE1234…, DK12345) used for handling/calculation of EU VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerVatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerVatNumber { get; set; }

        /// <summary>
        /// GLN number for the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerGLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerGLN { get; set; }

        /// <summary>
        /// Is the invoice exported to financial/accounting system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        /// <summary>
        /// Is the invoice aggregated, ie containing multplie orders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAggregated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAggregated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoice
    {
        /// <summary>
        /// Header information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerInvoiceHeader InvoiceHeader { get; set; } = new CustomerInvoiceHeader();

        /// <summary>
        /// List of rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceRows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerInvoiceRow> InvoiceRows { get; set; } = new List<CustomerInvoiceRow>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceHeader
    {
        /// <summary>
        /// Invoice number from the seller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The sellers customer number of the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The calculated payment number for the invoice, in Sweden called OCR number, in Denmark FIK, in Norway KID etc, the name is different for most country, but is used for automatic identification in payment systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ocrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OcrNumber { get; set; }

        /// <summary>
        /// Orders connected to the invioce. Aggregated invoices can have multiple orders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerInvoiceOrder> Orders { get; set; }

        /// <summary>
        /// Additional reference number added by the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberEndCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberEndCustomer { get; set; }

        /// <summary>
        /// The sellers reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OurReference { get; set; }

        /// <summary>
        /// The create date for the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// The official invoice date on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset InvoiceDate { get; set; }

        /// <summary>
        /// Change date on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// Due date on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// The original due date on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalDueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OriginalDueDate { get; set; }

        /// <summary>
        /// The pay date for the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PayDate { get; set; }

        /// <summary>
        /// The status on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceHeaderCustomerInvoiceStatus CustomerInvoiceStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceHeaderInvoiceType InvoiceType { get; set; }

        /// <summary>
        /// Notes on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Reminder 1 create date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder1CreateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Reminder1CreateDate { get; set; }

        /// <summary>
        /// Reminder 2 create date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder2CreateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Reminder2CreateDate { get; set; }

        /// <summary>
        /// The format the invoice will be sent in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceHeaderSendFormat SendFormat { get; set; }

        /// <summary>
        /// The system that is sending the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendSystem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceHeaderSendSystem SendSystem { get; set; }

        /// <summary>
        /// Is the invoice in need of manual release or is it allowed to be sent automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAllowedToSend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllowedToSend { get; set; }

        /// <summary>
        /// Is the invoice exported to financial/accounting system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        /// <summary>
        /// Is the invoice aggregated, ie containing multplie orders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAggregated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAggregated { get; set; }

        /// <summary>
        /// Buyer info
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoiceBuyerInfo Buyer { get; set; }

        /// <summary>
        /// Seller info
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoiceSellerInfo Seller { get; set; }

        /// <summary>
        /// Invoice text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceTexts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoiceTexts InvoiceTexts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceRow
    {
        /// <summary>
        /// The posistion on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        /// <summary>
        /// the sub position, used if row was partialied delivered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        /// <summary>
        /// How the row was supplied to buyer example: from warehouse, direct from supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerInvoiceRowSupplyMode SupplyMode { get; set; }

        /// <summary>
        /// If the row is the main product in a set / bundled products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool HasChildren { get; set; }

        /// <summary>
        /// If the row is connected to another row in this invoice. (bundled products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentPosition { get; set; }

        /// <summary>
        /// The external id of the project linked to the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// The external id of the reason code linked to the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderReasonCode { get; set; }

        /// <summary>
        /// (Output) Order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// (Output) Order row id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? OrderRowId { get; set; }

        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductSimple Product { get; set; } = new ProductSimple();

        [Newtonsoft.Json.JsonProperty("salesData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerInvoiceQuantityAndUnitWithPrice SalesData { get; set; } = new CustomerInvoiceQuantityAndUnitWithPrice();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceOrder
    {
        /// <summary>
        /// Order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// If the buyer has added a reference number on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        /// <summary>
        /// The order date from the order linked to the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OrderDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceBuyerInfo
    {
        /// <summary>
        /// Name of the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Buyers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationsNumber { get; set; }

        /// <summary>
        /// EU VAT number, (often starts with country 2 digits like SE1234…, DK12345) used for handling/calculation of EU VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatNumber { get; set; }

        /// <summary>
        /// The buyers GLN number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GLN { get; set; }

        /// <summary>
        /// The buyers Excise number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exciseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExciseNumber { get; set; }

        /// <summary>
        /// Invoice address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceAdress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull InvoiceAdress { get; set; }

        /// <summary>
        /// Delivery address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull DeliveryAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceSellerInfo
    {
        /// <summary>
        /// The name of the seller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Sellers tax identify number ( Organisationsnr. In Sweden, TIN in Norway, CVR in Denmark, UTR in UK etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationsNumber { get; set; }

        /// <summary>
        /// EU VAT number, (often starts with country 2 digits like SE1234…, DK12345) used for handling/calculation of EU VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatNumber { get; set; }

        /// <summary>
        /// The sellers GLN number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GLN { get; set; }

        /// <summary>
        /// The sellers Excise number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exciseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExciseNumber { get; set; }

        /// <summary>
        /// Invoice address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceTexts
    {
        /// <summary>
        /// Extra text1 on invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text1 { get; set; }

        /// <summary>
        /// Extra text2 on invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text2 { get; set; }

        /// <summary>
        /// Extra text3 on invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text3 { get; set; }

        /// <summary>
        /// Extra text4 on invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text4 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSimple
    {
        /// <summary>
        /// Sellers product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Sellers product name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceQuantityAndUnitWithPrice
    {
        /// <summary>
        /// Quantity on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        /// <summary>
        /// Unit on the offer, example pcs, box, pallet, st, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        /// <summary>
        /// Price per unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// VAT percent that will be added to the price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// Currency on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Total row price ex VAT in 2 decimals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RowSum { get; set; }

        /// <summary>
        /// Total row VAT in 2 decimals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RowVat { get; set; }

        /// <summary>
        /// Total row in 2 decimals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RowTotal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderAdressFull
    {
        [Newtonsoft.Json.JsonProperty("name1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name1 { get; set; }

        [Newtonsoft.Json.JsonProperty("name2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name2 { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("doorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DoorCode { get; set; }

    }

    /// <summary>
    /// CustomerOrderAction parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderActionParameters
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrder
    {
        [Newtonsoft.Json.JsonProperty("orderHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerOrderHeader OrderHeader { get; set; } = new CustomerOrderHeader();

        [Newtonsoft.Json.JsonProperty("orderRows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerOrderRow> OrderRows { get; set; } = new List<CustomerOrderRow>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderHeader
    {
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderHeaderOrderType? OrderType { get; set; }

        [Newtonsoft.Json.JsonProperty("orderMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        [Newtonsoft.Json.JsonProperty("orderNumberEndCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberEndCustomer { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderHeaderOrderStatus? OrderStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("customerGLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerGLN { get; set; }

        [Newtonsoft.Json.JsonProperty("askedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AskedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("askedDeliveryTimeSlots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeSlot> AskedDeliveryTimeSlots { get; set; }

        /// <summary>
        /// (1st Priority = User input, 2nd Priority = Customer settings, 3rd priority = Customer default setting = Unknown, should fall back on Client settings)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartialDelivery { get; set; }

        [Newtonsoft.Json.JsonProperty("freightFree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreightFree { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderHeaderPaymentType? PaymentType { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// transport condition is incoterms. (EXW, FCA, DDU, DDP, CYP, CIP, FAS, CFR, CIF, CPT, DAF, DES, DEQ, AVT, FOB, DAP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportCondition { get; set; }

        [Newtonsoft.Json.JsonProperty("palletRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PalletRegistrationNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("yourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string YourReference { get; set; }

        [Newtonsoft.Json.JsonProperty("ourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OurReference { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull DeliveryAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressSimple InvoiceAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("delieryPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelieryPhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("advisePhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvisePhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("adviseEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdviseEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("notations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderHeaderNotations Notations { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference { get; set; }

        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderHeaderShipment> Shipments { get; set; }

        [Newtonsoft.Json.JsonProperty("external", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderExternal External { get; set; }

        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId { get; set; }

        [Newtonsoft.Json.JsonProperty("departureId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartureId { get; set; }

        [Newtonsoft.Json.JsonProperty("routeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RouteId { get; set; }

        [Newtonsoft.Json.JsonProperty("servicePoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicePoint ServicePoint { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerOrderPaymentTransaction> PaymentTransactions { get; set; }

        /// <summary>
        /// (Output) only available when OrderType=AgreedOrder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agreedOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderHeaderAgreedOrder AgreedOrder { get; set; }

        /// <summary>
        /// Use when placing a customer order using Extends campaign engine
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderHeaderPromotion Promotion { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryMethodServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerOrderDeliveryMethodService> DeliveryMethodServices { get; set; }

        /// <summary>
        /// Add any text and the order will end up in a review queue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reviewReasonNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ReviewReasonNotes { get; set; }

        /// <summary>
        /// Order meta data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderMetaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerOrderMetaData> OrderMetaData { get; set; }

        /// <summary>
        /// (Output) Customer invoices
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerOrderInvoice> CustomerInvoices { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceAdressGLN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceAdressGLN { get; set; }

        /// <summary>
        /// Sales channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesChannel { get; set; }

        /// <summary>
        /// Send delivery updates to: Internal, Customer, No mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDeliveryUpdateMailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderHeaderOrderDeliveryUpdateMailType? OrderDeliveryUpdateMailType { get; set; }

        /// <summary>
        /// Input only. Set your internal cost explicitly. 
        /// <br/>This will override the cost on automatically added freights from freight calculation.
        /// <br/>This cost must be expressed in your base currency which could differ from the currency on the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("explicitFreightCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExplicitFreightCost { get; set; }

        [Newtonsoft.Json.JsonProperty("accountingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccountingCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRow
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("rowOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowRowOperation? RowOperation { get; set; }

        [Newtonsoft.Json.JsonProperty("orderRowStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowOrderRowStatus? OrderRowStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("productVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowProductVisibility? ProductVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerOrderRowProduct Product { get; set; } = new CustomerOrderRowProduct();

        [Newtonsoft.Json.JsonProperty("salesData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantityAndUnitWithPrice SalesData { get; set; } = new QuantityAndUnitWithPrice();

        [Newtonsoft.Json.JsonProperty("notations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowNotations Notations { get; set; }

        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowSupplyMode? SupplyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnitWithPrice DeliveryData { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNumber { get; set; }

        /// <summary>
        /// Not in use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowReference RowReference { get; set; }

        /// <summary>
        /// External reference to row. Requires orderHeader.external to be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalRow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowExternal ExternalRow { get; set; }

        /// <summary>
        /// (Output) Output of available balance for warehouse products in ATP check. Can be negative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableBalance { get; set; }

        /// <summary>
        /// (Output) Output of shortest supplier lead time for this product. Can be null if no supplier lead time is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minSupplierLeadTimeHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinSupplierLeadTimeHours { get; set; }

        /// <summary>
        /// (Output) Output of picked units data. Used for serial numbers and batch numbers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stockedUnitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowStockedUnit StockedUnitData { get; set; }

        [Newtonsoft.Json.JsonProperty("backOrderHandlingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowBackOrderHandlingId? BackOrderHandlingId { get; set; }

        [Newtonsoft.Json.JsonProperty("agreedOrderCallOff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowCallOff AgreedOrderCallOff { get; set; }

        /// <summary>
        /// Campaign settings from Extends campaign engine
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowPromotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderRowPromotion RowPromotion { get; set; }

        /// <summary>
        /// (Output) Output of parent row position when row is a child of a bill of materials row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billOfMaterialsParentRowPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BillOfMaterialsParentRowPosition { get; set; }

        /// <summary>
        /// (Output) Output of allocation status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allocationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderRowAllocationStatus? AllocationStatus { get; set; }

        /// <summary>
        /// Requested batch number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedBatchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedBatchNo { get; set; }

        /// <summary>
        /// (Output) Order row id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? OrderRowId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeSlot
    {
        [Newtonsoft.Json.JsonProperty("startMinute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartMinute { get; set; }

        [Newtonsoft.Json.JsonProperty("durationMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationMinutes { get; set; }

        /// <summary>
        /// The service time in minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceTimeMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceTimeMinutes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderAdressSimple
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderHeaderNotations
    {
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("handlingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HandlingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("orderingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderingUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("orderingUnitNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderingUnitNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("executingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutingUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("executingUnitNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutingUnitNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDescription1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDescription1 { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDescription2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDescription2 { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDescription3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDescription3 { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDescription4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDescription4 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHeaderShipment
    {
        [Newtonsoft.Json.JsonProperty("shipmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference { get; set; }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Packages { get; set; }

        [Newtonsoft.Json.JsonProperty("numberPackages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberPackages { get; set; }

        [Newtonsoft.Json.JsonProperty("transportWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransportWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("transportVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransportVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("pickDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PickDate { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forwarder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forwarder { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderExternal
    {
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("receivedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReceivedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("freeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FreeText { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ServicePoint
    {
        /// <summary>
        /// An ID of the servicepoint, the id comes from the shipping company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryLocationId ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryLocationId_ { get; set; }

        /// <summary>
        /// A shortname for the shipping company, these are most used DHL=DHL, SCHENKER=SCH, Postnord=POS, Bring=BRI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

        /// <summary>
        /// The name of the servicepoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Address field to the servicepoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryId { get; set; }

    }

    /// <summary>
    /// Customer order payment transaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderPaymentTransaction
    {
        /// <summary>
        /// PaymentTransactionId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTransactionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentTransactionId { get; set; }

        /// <summary>
        /// PaymentProvider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentProvider { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderHeaderAgreedOrder
    {
        [Newtonsoft.Json.JsonProperty("isCustomerOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCustomerOwned { get; set; }

        [Newtonsoft.Json.JsonProperty("isFixedPriceAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedPriceAgreement { get; set; }

        [Newtonsoft.Json.JsonProperty("isForCompanyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForCompanyGroup { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderHeaderPromotion
    {
        /// <summary>
        /// Set true if order is supposed to use Extends promotions when it is placed. Default is an api order placed as is, without any modifications from promotions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usePromotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UsePromotions { get; set; }

        /// <summary>
        /// Promotion code for campigns. Only input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PromotionCode { get; set; }

    }

    /// <summary>
    /// Customer order delivery method
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderDeliveryMethodService
    {
        /// <summary>
        /// An id for the additional freight service, this id is the id that the TA provider you use have for the transport booking. TA providers in this case could be Consignor, Unifaun etc. Or the id could be an id that you warehouse provider use in the warehouse application. Ask the Warehouse provider which id´s to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceId { get; set; }

        /// <summary>
        /// AccountNumber
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderMetaData
    {
        /// <summary>
        /// Meta data label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaDataLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MetaDataLabel { get; set; }

        /// <summary>
        /// Meta data value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaDataValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MetaDataValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderInvoice
    {
        /// <summary>
        /// Invoice number for invoices connected to this order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Link to an pdf of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowProduct
    {
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("productNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("customerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProductNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowNotations
    {
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("handlingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HandlingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalNotes { get; set; }

        /// <summary>
        /// Project, ref to CustomerOrderProject
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// ReasonCode, ref to CustomerOrderReasonCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowReference
    {
        [Newtonsoft.Json.JsonProperty("refPosition", Required = Newtonsoft.Json.Required.Always)]
        public int RefPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("refSubPosition", Required = Newtonsoft.Json.Required.Always)]
        public int RefSubPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("cause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cause { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowExternal
    {
        [Newtonsoft.Json.JsonProperty("externalRowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalRowId { get; set; }

        [Newtonsoft.Json.JsonProperty("externalPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSubPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalSubPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("freeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FreeText { get; set; }

    }

    /// <summary>
    /// Stocked unit information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowStockedUnit
    {
        /// <summary>
        /// List of serial numbers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }

        /// <summary>
        /// List of batch numbers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batchNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BatchNumbers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowCallOff
    {
        /// <summary>
        /// OrderNumber of the agreed order. If not specified Extend will try to use balance from an agreed order when that is possible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Position on the specified agreed order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        /// <summary>
        /// Input only. Set to false when not wanting to use balance from an agreed order. Default is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useBalanceFromAgreedOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseBalanceFromAgreedOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderRowPromotion
    {
        /// <summary>
        /// (Output) Output, true if row will be added by Extend as a result of a promotion or campaign. Only available when using CustomerOrderCampaignProcessor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isResultOfPromotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsResultOfPromotion { get; set; }

        /// <summary>
        /// Promotion name. Both input and output. Set this value from result of CustomerOrderCampaignProcessor when you are using a limited campaign, eg one time voucher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PromotionName { get; set; }

        /// <summary>
        /// (Output) Reference to the row triggering this campaign. Will be set only for campaigns triggering on row level. Only in use for campaign processor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceRowPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceRowPosition { get; set; }

    }

    /// <summary>
    /// Customer invoice result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceResult
    {
        /// <summary>
        /// The invoice number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InvoiceNumber { get; set; }

    }

    /// <summary>
    /// Customer order project list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderProjectList
    {
        /// <summary>
        /// The project list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerOrderProject> ProjectList { get; set; } = new List<CustomerOrderProject>();

    }

    /// <summary>
    /// Customer order project
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderProject
    {
        /// <summary>
        /// Project, client specific external id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Active
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

    }

    /// <summary>
    /// Customer order reason code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderReasonCodeList
    {
        /// <summary>
        /// The reason code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCodeList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerOrderReasonCode> ReasonCodeList { get; set; } = new List<CustomerOrderReasonCode>();

    }

    /// <summary>
    /// Customer order reason code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderReasonCode
    {
        /// <summary>
        /// Reason code, client specific external id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Active
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

    }

    /// <summary>
    /// CustomerOrderListSearchParameters from comment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderListSearchParameters
    {
        /// <summary>
        /// The order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The order number specified by external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderListSearchParametersOrderStatus? OrderStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderListSearchParametersSupplyMode? SupplyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDateFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDateTo { get; set; }

        [Newtonsoft.Json.JsonProperty("askedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AskedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryCountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("companyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Shipping number for warehouse orders. Shipping numbers for direct delivery orders are not searchable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingNumber { get; set; }

        /// <summary>
        /// Order must have been modified after this date. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedDateFrom { get; set; }

        /// <summary>
        /// The size of page, default is 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageCount { get; set; }

        /// <summary>
        /// The page number, default is 0 and returns the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageOffset { get; set; }

    }

    /// <summary>
    /// CustomerOrderListItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerOrderListItem
    {
        /// <summary>
        /// The order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The order number specified by external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumberExternal { get; set; }

        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderListItemOrderType? OrderType { get; set; }

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerOrderListItemOrderStatus OrderStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OrderDate { get; set; }

        [Newtonsoft.Json.JsonProperty("askedDeliveryDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset AskedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ChangeDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomSuccess
    {
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }

    }

    /// <summary>
    /// The Search Parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerSearchParameters
    {
        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Customer number search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumberSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumberSearch { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Organization number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email2 { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber2 { get; set; }

        /// <summary>
        /// Delivery address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryAddress1 { get; set; }

        /// <summary>
        /// Delivery postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryPostalCode { get; set; }

        /// <summary>
        /// Delivery city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryCity { get; set; }

        /// <summary>
        /// Return only customers changed after this date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedAfterDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangedAfterDate { get; set; }

        [Newtonsoft.Json.JsonProperty("incoterms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSearchParametersIncoterms? Incoterms { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Customer List
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerListItemList
    {
        /// <summary>
        /// Customer item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerListItem> CustomerList { get; set; } = new List<CustomerListItem>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationInformation PaginationInfo { get; set; }

    }

    /// <summary>
    /// Customer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerListItem
    {
        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Organization number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email2 { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber2 { get; set; }

        /// <summary>
        /// Delivery address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryAddress1 { get; set; }

        /// <summary>
        /// Delivery postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryPostalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryPostalCode { get; set; }

        /// <summary>
        /// Delivery city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryCity { get; set; }

        /// <summary>
        /// Credit limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditLimit { get; set; }

        /// <summary>
        /// Currency of the credit limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditLimitCurrency { get; set; }

        /// <summary>
        /// Latest change date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangeDate { get; set; }

        /// <summary>
        /// Email for invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

    }

    /// <summary>
    /// Customer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Customer
    {
        /// <summary>
        /// The customer number, needs to be uniqe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// When creating a new customer, if this field referes to a pre defined customer template, the whole model is not needed. Extend will use data from template if something is missing in POST call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PostTemplate { get; set; }

        /// <summary>
        /// Normaly put the whole customer name here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(180, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// If you want to have surname and last name separated, add last name here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(180)]
        public string LastName { get; set; }

        /// <summary>
        /// (Output) A timestamp when customer was created in Extend
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// (Output) Change date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// A textfield avaiable for search in Extend system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alfaSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AlfaSearch { get; set; }

        /// <summary>
        /// The email address to where the customers invoices will be send.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string InvoiceEmail { get; set; }

        /// <summary>
        /// The email address to where customers orderconfirmations will be send.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderConfirmationEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string OrderConfirmationEmail { get; set; }

        /// <summary>
        /// If this is filled in, the deliverynote will be send to this address, but if this field is empty, the delivery note will be send to the order confirmation address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryNoteEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string DeliveryNoteEmail { get; set; }

        /// <summary>
        /// An email address to where a BCC copy of the orderconfirmation will be send.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderConfirmationBCCEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string OrderConfirmationBCCEmail { get; set; }

        /// <summary>
        /// the corporate identity number (organisationsnummer in sweden, CVR in denmark etc. )
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// EU VAT registration number for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string VatNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("vatRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VatRegistered { get; set; }

        /// <summary>
        /// If you have a agreement number with the customer, add it here will be avaiable in documents like invoices, confirmations etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agreementNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgreementNumber { get; set; }

        /// <summary>
        /// A phone number send to forwarder, normally a mobile phone to where the forwarder can send shipping advices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adviceToPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string AdviceToPhone { get; set; }

        /// <summary>
        /// Another phone number to customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Phone { get; set; }

        /// <summary>
        /// Fax number to customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Fax { get; set; }

        /// <summary>
        /// A note of the addres to the customers homepage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Homepage { get; set; }

        /// <summary>
        /// (Output) A note about the masterdata for this customer, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterDataManualStatusNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string MasterDataManualStatusNotes { get; set; }

        /// <summary>
        /// (Output) Customer status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerStatus { get; set; }

        /// <summary>
        /// A status on the masterdata for this customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterDataSettingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerMasterDataSettingStatus? MasterDataSettingStatus { get; set; }

        /// <summary>
        /// Customer financial setting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerFinancialSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerFinancialSettings CustomerFinancialSettings { get; set; }

        /// <summary>
        /// Customer classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerClassification CustomerClassification { get; set; }

        /// <summary>
        /// Customer logistics settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerLogisticsSettings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerLogisticsSettings CustomerLogisticsSettings { get; set; } = new CustomerLogisticsSettings();

        /// <summary>
        /// Customer invoice address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoiceAddress CustomerInvoiceAddress { get; set; }

        /// <summary>
        /// Customer delivery address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerDeliveryAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerDeliveryAddress CustomerDeliveryAddress { get; set; } = new CustomerDeliveryAddress();

        /// <summary>
        /// Customer visiting address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerVisitingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerVisitingAddress CustomerVisitingAddress { get; set; }

        /// <summary>
        /// Customer additional delivery addresses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAdditionalDeliveryAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerAdditionalDeliveryAddress> CustomerAdditionalDeliveryAddresses { get; set; }

        /// <summary>
        /// Customer groups
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerGroup> CustomerGroups { get; set; }

        /// <summary>
        /// Customer classes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerClasses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerClass> CustomerClasses { get; set; }

        /// <summary>
        /// Customer forwarder numbers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerForwarderNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerForwarderNumber> CustomerForwarderNumbers { get; set; }

        /// <summary>
        /// Customer contacts. Unique key for this contact is (case sensitive) firstName + lastName + eMail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerContact> CustomerContacts { get; set; }

        /// <summary>
        /// Customer users. Unique key for this contact is (case sensitive) userName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerUser> CustomerUsers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerFinancialSettings
    {
        /// <summary>
        /// A credit limit on customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditLimit { get; set; }

        /// <summary>
        /// If customers payment terms shall start counting form when invoice is created of if the counting starts from next month start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculateDueDateFromNextMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CalculateDueDateFromNextMonth { get; set; }

        /// <summary>
        /// The format the customers invoices shall be created in. Avaiable formats are Pdf, Svefaktura, "Link to url", "Xml OrderInvoiceExport", Letter, Email, None.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceSendFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsCustomerInvoiceSendFormat? CustomerInvoiceSendFormat { get; set; }

        /// <summary>
        /// A settings if the customers invoices must be reviewed before send, of if they can be send directly, avaiable settings are "No review", Review
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceSendReviewType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsCustomerInvoiceSendReviewType? CustomerInvoiceSendReviewType { get; set; }

        /// <summary>
        /// Defines which system that shall be responsible for distribution the invoice, Avaiable systems are Extend, Fortnox ,"Fortnox Nox Finans", Inexchange, "External part"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoiceSendSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsCustomerInvoiceSendSystem? CustomerInvoiceSendSystem { get; set; }

        /// <summary>
        /// (Output) How the customers invoices are created a read only value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerInvoicingProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsCustomerInvoicingProcess? CustomerInvoicingProcess { get; set; }

        /// <summary>
        /// Settings on where to distribute the invoices. 
        /// <br/>None=Invoice should not be send, Print = Print(manually in Extend), 
        /// <br/>Email=Should be sent automatic to either customer EMail2 or client email, 
        /// <br/>Warehouse = Invoice is printed at the warehouse, 
        /// <br/>EDI=Invoice is send with EDI, 
        /// <br/>"Set to sent"=Set invoice to sent.Export / other system will handle distribution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferedCustomerInvoiceSendType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsPreferedCustomerInvoiceSendType? PreferedCustomerInvoiceSendType { get; set; }

        /// <summary>
        /// A settings meaning that the customers invoices are not created until expected deliverydate has passed. (nomally the invoice is created when goods are shipped)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceAfterAskedDeliveryDatePassed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvoiceAfterAskedDeliveryDatePassed { get; set; }

        /// <summary>
        /// a settings of the payment method that should be used as defalut when order is created in extend. BUT this is only a suggested vaule, will not force transaction to be in this payment method. Avaiable methods are INV,AUTO,ADV,FAC,CAS,LAS,CC,MOH,FAM,COD,KCO,MOB,BONUS,GC,KPR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerFinancialSettingsDefaultPaymentType? DefaultPaymentType { get; set; }

        /// <summary>
        /// Invoices to this customer shall be payed by other customer number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payingCustomerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayingCustomerNumber { get; set; }

        /// <summary>
        /// Information field about the interest rate if late payments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penaltyInterestPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenaltyInterestPercent { get; set; }

        /// <summary>
        /// A typing if orders to this customer must be approved by someone else at customer to be processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalNeededForOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApprovalNeededForOrder { get; set; }

        /// <summary>
        /// Number of days of payment terms for this customer. A number value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsOfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsOfPayment { get; set; }

        /// <summary>
        /// The customers EU excise tax number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exciseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExciseNumber { get; set; }

        /// <summary>
        /// Require prepayment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirePrepayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequirePrepayment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerClassification
    {
        /// <summary>
        /// A type for the customer, avaiable types are Private, Business, Unknown, Reseller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerClassificationCustomerType? CustomerType { get; set; }

        /// <summary>
        /// The financial category on customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerFinancialCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFinancialCategory { get; set; }

        /// <summary>
        /// The customers connection to a corporate group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyGroup { get; set; }

        /// <summary>
        /// A mark if this customer is an internal customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InternalCustomer { get; set; }

        /// <summary>
        /// Statistical category level 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory1 { get; set; }

        /// <summary>
        /// Statistical category level 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory2 { get; set; }

        /// <summary>
        /// Statistical category level 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory3 { get; set; }

        /// <summary>
        /// The salesman connected to this customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesman", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Salesman { get; set; }

        /// <summary>
        /// A bonus program number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusProgramMember", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BonusProgramMember { get; set; }

        /// <summary>
        /// The customers ABC classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aBC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ABC { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerLogisticsSettings
    {
        /// <summary>
        /// The frieght agreement for the customer use "standard" if no specific should be used on customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerFreightAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFreightAgreement { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerOrderingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLogisticsSettingsCustomerOrderingType? CustomerOrderingType { get; set; }

        /// <summary>
        /// A settings if the customers orders are allowed to be shipped partially. Unknown in settings means that the customers orders will be handled as standard settings on client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPartialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLogisticsSettingsDefaultPartialDelivery? DefaultPartialDelivery { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDayLeadTimeOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeliveryDayLeadTimeOverride { get; set; }

        /// <summary>
        /// A name of a departure that the customers deliverys should be routed to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Departure { get; set; }

        /// <summary>
        /// A descriptions field for the customer,  text field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A route value for handling the shipping routes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("route", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Route { get; set; }

        /// <summary>
        /// A standard shipping mark that will be defalut on all orders on this customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingMark { get; set; }

        /// <summary>
        /// A settings if order to this customer need to be in a planning que.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planningRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PlanningRequired { get; set; }

        /// <summary>
        /// A settings on how the customers backorders shall be handled if they occurs. Read more about what the different settings in Extend knowledge base.  Use "Clientdefalut" if no other obvious settings should be used. 
        /// <br/>Avaiable settings are NONE, BOASAP, BOONH, Clientsdefault, CANCELALL, CANCELBOASAP, CANCELBOONH, CANCELIMMEDIATE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOrderSetting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLogisticsSettingsBackOrderSetting? BackOrderSetting { get; set; }

        /// <summary>
        /// A filed with name/code for a consolidated shippment for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consolidateDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsolidateDelivery { get; set; }

        /// <summary>
        /// The customers account number in pallet pool systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("palletRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PalletRegistrationNumber { get; set; }

        /// <summary>
        /// A text description on the terms of delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsOfDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsOfDelivery { get; set; }

        /// <summary>
        /// INCOTERMS for deliverys to this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLogisticsSettingsTransportCondition? TransportCondition { get; set; }

        /// <summary>
        /// If Extend storefront / webshop shall be forced to use a specific warehouse for this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webshopWarehouseOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebshopWarehouseOverride { get; set; }

        /// <summary>
        /// Send delivery updates to: Internal, Customer, No mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDeliveryUpdateMailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLogisticsSettingsOrderDeliveryUpdateMailType? OrderDeliveryUpdateMailType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerInvoiceAddress
    {
        /// <summary>
        /// Invoice name field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Invoice address fields for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerAddress Address { get; set; } = new CustomerAddress();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerDeliveryAddress
    {
        /// <summary>
        /// Delivery address fields for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerAddress Address { get; set; } = new CustomerAddress();

        /// <summary>
        /// Delivery address excise number field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressExciseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressExciseNumber { get; set; }

        /// <summary>
        /// Delivery address latitude field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        /// <summary>
        /// Delivery address longitude field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        /// <summary>
        /// Delivery address doorCode field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DoorCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerVisitingAddress
    {
        /// <summary>
        /// Visiting address fields for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerAddress Address { get; set; } = new CustomerAddress();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerAdditionalDeliveryAddress
    {
        /// <summary>
        /// Delivery name field for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Delivery address fields for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerAddress Address { get; set; } = new CustomerAddress();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerGroup
    {
        /// <summary>
        /// Name of customer group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// (Output) Customer group description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerClass
    {
        /// <summary>
        /// Name of customer class
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// (Output) Customer class description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerForwarderNumber
    {
        /// <summary>
        /// Forwarder name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forwarder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forwarder { get; set; }

        /// <summary>
        /// Client warehouse short name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientWarehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientWarehouse { get; set; }

        /// <summary>
        /// Transport mode short name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransportMode { get; set; }

        /// <summary>
        /// (Output) Shipping method name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportModeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportModeName { get; set; }

        /// <summary>
        /// Customers account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forwarderCustomerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForwarderCustomerNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerContact
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobile2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile2 { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile3 { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EMail { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// (Output) Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// (Output) Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerUser
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobile2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile2 { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile3 { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EMail { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// (Output) Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// (Output) Fields for extend storefront / webshop users for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// Fields for contacts to the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerAddress
    {
        /// <summary>
        /// Address1 field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        /// <summary>
        /// Address postal code field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Address city field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        /// <summary>
        /// Address state field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Address country field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        /// <summary>
        /// Address EAN field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressEAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressEAN { get; set; }

    }

    /// <summary>
    /// The report parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GenericReportParameters
    {
        /// <summary>
        /// The reportId. Get this from support.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ReportId { get; set; }

    }

    /// <summary>
    /// GTIN
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GTIN
    {
        /// <summary>
        /// The GTIN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gtiNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GtiNumber { get; set; }

    }

    /// <summary>
    /// OfferListSearchParameters from comment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferListSearchParameters
    {
        /// <summary>
        /// The offer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferNumber { get; set; }

        /// <summary>
        /// Status of the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferListSearchParametersOfferStatus? OfferStatus { get; set; }

        /// <summary>
        /// Offer create date from. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferDateFrom { get; set; }

        /// <summary>
        /// Offer create date to. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferDateTo { get; set; }

        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Order number as a result of an approved offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// List of offers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferListItemList
    {
        /// <summary>
        /// The offer item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OfferListItem> OfferItemList { get; set; } = new List<OfferListItem>();

        /// <summary>
        /// The pagination information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    /// <summary>
    /// CustomerOrderListItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferListItem
    {
        /// <summary>
        /// The offer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OfferNumber { get; set; }

        /// <summary>
        /// The order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The date the offer was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OfferDate { get; set; }

        /// <summary>
        /// Status of the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferListItemOfferStatus OfferStatus { get; set; }

        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Offer
    {
        [Newtonsoft.Json.JsonProperty("offerHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferHeader OfferHeader { get; set; } = new OfferHeader();

        /// <summary>
        /// List of rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerRows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OfferRow> OfferRows { get; set; } = new List<OfferRow>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferHeader
    {
        /// <summary>
        /// The offer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferNumber { get; set; }

        /// <summary>
        /// The date the offer was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferDate { get; set; }

        /// <summary>
        /// Last change date on the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// Asked deliverydate on the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("askedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AskedDeliveryDate { get; set; }

        /// <summary>
        /// The customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Buyers reference added to the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string YourReference { get; set; }

        /// <summary>
        /// If the order are allowed to be partial delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partialDelivery", Required = Newtonsoft.Json.Required.Always)]
        public bool PartialDelivery { get; set; }

        /// <summary>
        /// The email address to where the invoice will be send.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

        /// <summary>
        /// Phone number for delivery advice, will be send to transport company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advisePhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvisePhoneNumber { get; set; }

        /// <summary>
        /// The status of the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferHeaderOfferStatus? OfferStatus { get; set; }

        /// <summary>
        /// Sellers reference on the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OurReference { get; set; }

        /// <summary>
        /// Asked delivery method for the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// Incoterms for the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferHeaderTransportCondition? TransportCondition { get; set; }

        /// <summary>
        /// A reference number added to the offer from the buyer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberExternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberExternal { get; set; }

        /// <summary>
        /// If there will be added freight cost or not on the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightFree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreightFree { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull DeliveryAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressSimple InvoiceAddress { get; set; }

        /// <summary>
        /// Email to where offer, and order confirmaiton will be send by email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adviseEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdviseEmail { get; set; }

        /// <summary>
        /// Phone number to the customer on the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advisePhoneNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvisePhoneNumber2 { get; set; }

        /// <summary>
        /// Additional reference number from buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumberEndCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumberEndCustomer { get; set; }

        /// <summary>
        /// Payment type for the offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferHeaderPaymentTypeId? PaymentTypeId { get; set; }

        /// <summary>
        /// Number of days in payment terms
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// Offer is valid to this date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validToDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ValidToDate { get; set; }

        /// <summary>
        /// (Output) If offer is accepted, this is the order number that was created due to this offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The salesman assigned to the buyer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesman", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Salesman { get; set; }

        /// <summary>
        /// Notations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OfferHeaderNotations Notations { get; set; }

        /// <summary>
        /// Messages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessCaseMessage> Messages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferRow
    {
        /// <summary>
        /// The posistion on the offer that the row got from Extend when saved in Extend system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        /// <summary>
        /// The sub position, used if row is partialied delivered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        /// <summary>
        /// How the row will be supplied to buyer example: from warehouse, direct from supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferRowSupplyMode? SupplyMode { get; set; }

        /// <summary>
        /// ShortName of the warehouse from where shipment will be done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Expected delivery date at customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductSimple Product { get; set; }

        [Newtonsoft.Json.JsonProperty("salesData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnitWithPrice SalesData { get; set; }

        [Newtonsoft.Json.JsonProperty("rowNotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OfferRowNotations RowNotations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Contact
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferHeaderNotations
    {
        /// <summary>
        /// Shipping mark that will be added to the order. Will be send to transport company and added to the deliverynote
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingMark { get; set; }

        /// <summary>
        /// A text send to the warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handlingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HandlingMark { get; set; }

        /// <summary>
        /// Additional note on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BusinessCaseMessage
    {
        /// <summary>
        /// Subject
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        /// <summary>
        /// body
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body { get; set; }

        /// <summary>
        /// Create date, skip/leave empty when adding new message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OfferRowNotations
    {
        [Newtonsoft.Json.JsonProperty("shippingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("handlingMark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HandlingMark { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("productNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNotes { get; set; }

    }

    /// <summary>
    /// The Search Parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductAvailabilitySearchParameters
    {
        /// <summary>
        /// The Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Availability must have been modified after this date. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedDateFrom { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Product Availability List
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductAvailabilityList
    {
        /// <summary>
        /// The product price item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productAvailabilityList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductAvailability> ProductAvailabilityList1 { get; set; } = new List<ProductAvailability>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationInformation PaginationInfo { get; set; }

    }

    /// <summary>
    /// Product Availability
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductAvailability
    {
        /// <summary>
        /// The Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Physical Balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("physicalBalance", Required = Newtonsoft.Json.Required.Always)]
        public int PhysicalBalance { get; set; }

        /// <summary>
        /// Available Balance Now
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableBalanceNow", Required = Newtonsoft.Json.Required.Always)]
        public int AvailableBalanceNow { get; set; }

        /// <summary>
        /// Next Receiving Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextReceivingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextReceivingDate { get; set; }

        /// <summary>
        /// Available balance after next receiving. Receiving is purchase or warehouse transfer. Return orders are not included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avaiableOnNextReceiving", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvaiableOnNextReceiving { get; set; }

        /// <summary>
        /// Latest change date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        /// <summary>
        /// Balance for customer classified as priority group B
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableBalanceNowB", Required = Newtonsoft.Json.Required.Always)]
        public int AvailableBalanceNowB { get; set; }

        /// <summary>
        /// Balance for customer classified as priority group C
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableBalanceNowC", Required = Newtonsoft.Json.Required.Always)]
        public int AvailableBalanceNowC { get; set; }

        /// <summary>
        /// Next receivings Balance for customer classified as priority group B
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableOnNextReceivingB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableOnNextReceivingB { get; set; }

        /// <summary>
        /// Next receivings Balance for customer classified as priority group C
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableOnNextReceivingC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableOnNextReceivingC { get; set; }

        /// <summary>
        /// The Warehouse name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; }

        /// <summary>
        /// Quantity on next expected receiving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityOnNextReceiving", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityOnNextReceiving { get; set; }

        /// <summary>
        /// Ordered quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int OrderedQuantity { get; set; }

        /// <summary>
        /// Blocked balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockedBalance", Required = Newtonsoft.Json.Required.Always)]
        public int BlockedBalance { get; set; }

        /// <summary>
        /// Ordered quantity matching a future receiving. In use for reservation type DTT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantityMatchingReceiving", Required = Newtonsoft.Json.Required.Always)]
        public int OrderedQuantityMatchingReceiving { get; set; }

        /// <summary>
        /// Sum of quantities for all expected receivings from purchases
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpectedReceivingFromPurchase", Required = Newtonsoft.Json.Required.Always)]
        public int TotalExpectedReceivingFromPurchase { get; set; }

        /// <summary>
        /// Sum of quantities for all expected receivings from warehouse transfers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpectedReceivingFromWarehouseTransfer", Required = Newtonsoft.Json.Required.Always)]
        public int TotalExpectedReceivingFromWarehouseTransfer { get; set; }

        /// <summary>
        /// Sum of quantities for all expected receivings from returns
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpectedReceivingFromReturn", Required = Newtonsoft.Json.Required.Always)]
        public int TotalExpectedReceivingFromReturn { get; set; }

    }

    /// <summary>
    /// List of product description
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductDescriptionList
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The product description item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productDescriptionItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductDescriptionItem> ProductDescriptionItemList { get; set; } = new List<ProductDescriptionItem>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductDescriptionItem
    {
        /// <summary>
        /// Text type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TextType { get; set; }

        /// <summary>
        /// Language code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; }

        /// <summary>
        /// Product text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }

    }

    /// <summary>
    /// The Search parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductPriceSearchParameters
    {
        /// <summary>
        /// The customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// The list of product numbers, max 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumberList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProductNumberList { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// List of product prices
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductPriceList
    {
        /// <summary>
        /// The product price item list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPriceItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductPriceItem> ProductPriceItemList { get; set; } = new List<ProductPriceItem>();

        /// <summary>
        /// The pagination information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductPriceItem
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The sales unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SalesUnit { get; set; }

        /// <summary>
        /// Price is valid from this quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int FromQuantity { get; set; }

        /// <summary>
        /// The price for this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        /// <summary>
        /// The list price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.Always)]
        public double ListPrice { get; set; }

        /// <summary>
        /// The VAT percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Always)]
        public double VatPercent { get; set; }

        /// <summary>
        /// The currency for the price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductProperty
    {
        [Newtonsoft.Json.JsonProperty("propertyValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid PropertyValue { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyType { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [Newtonsoft.Json.JsonProperty("sortIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortIndex { get; set; }

    }

    /// <summary>
    /// The SearchParameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSearchParameters
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The name of the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        /// The supply mode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductSearchParametersSupplyMode? SupplyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("supplierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("supplierProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierProductNumber { get; set; }

        /// <summary>
        /// Product must have been modified after this date. Use fully qualified utc format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedDateFrom { get; set; }

        /// <summary>
        /// Product must have been modified before this date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedDateTo { get; set; }

        /// <summary>
        /// Shortname of warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// The size of page, default is 100
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageCount { get; set; }

        /// <summary>
        /// The page number, default is 0 and returns the first page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageOffset { get; set; }

    }

    /// <summary>
    /// ProductListItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductListItem
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        [Newtonsoft.Json.JsonProperty("productUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Always)]
        public double Cost { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("countryOfOrigin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryOfOrigin { get; set; }

        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductListItemSupplyMode SupplyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }

        [Newtonsoft.Json.JsonProperty("manufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// Comma separated list of GTIN numbers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gtinNumberList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GtinNumberList { get; set; }

        /// <summary>
        /// Shortname of warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory1 { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory2 { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory3 { get; set; }

    }

    /// <summary>
    /// Product from comment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Product
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The product data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductData ProductData { get; set; } = new ProductData();

        [Newtonsoft.Json.JsonProperty("productPrices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductPrice> ProductPrices { get; set; }

        [Newtonsoft.Json.JsonProperty("productWarehouses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductWarehouse> ProductWarehouses { get; set; }

        [Newtonsoft.Json.JsonProperty("productSuppliers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductData
    {
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("productDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("countryOfOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }

        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cost { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("annulled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Annulled { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annulledBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnnulledBy { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annulledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AnnulledDate { get; set; }

        [Newtonsoft.Json.JsonProperty("pickingDiscrepancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PickingDiscrepancy { get; set; }

        [Newtonsoft.Json.JsonProperty("productServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductServices ProductServices { get; set; }

        [Newtonsoft.Json.JsonProperty("productUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUnit { get; set; }

        /// <summary>
        /// (Output) The first GTIN for the product unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productGTINumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductGTINumber { get; set; }

        [Newtonsoft.Json.JsonProperty("purchaseProductUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseProductUnit { get; set; }

        /// <summary>
        /// (Output) purchaseGTINumber is not in use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseGTINumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseGTINumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productPurchaseFactorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDataProductPurchaseFactorType? ProductPurchaseFactorType { get; set; }

        [Newtonsoft.Json.JsonProperty("productPurchaseFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProductPurchaseFactor { get; set; }

        [Newtonsoft.Json.JsonProperty("outerPackagingUnitData1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnit OuterPackagingUnitData1 { get; set; }

        [Newtonsoft.Json.JsonProperty("outerPackagingUnitData2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnit OuterPackagingUnitData2 { get; set; }

        [Newtonsoft.Json.JsonProperty("measureUnitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnit MeasureUnitData { get; set; }

        [Newtonsoft.Json.JsonProperty("palletUnitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnit PalletUnitData { get; set; }

        [Newtonsoft.Json.JsonProperty("productVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDataProductVisibility? ProductVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("productGroupsAndCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductGroupsAndCategories ProductGroupsAndCategories { get; set; }

        [Newtonsoft.Json.JsonProperty("productMeasurements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Measurements ProductMeasurements { get; set; }

        [Newtonsoft.Json.JsonProperty("transportMeasurements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Measurements TransportMeasurements { get; set; }

        [Newtonsoft.Json.JsonProperty("productTransportDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductTransportDetails ProductTransportDetails { get; set; }

        /// <summary>
        /// Structure products is obsolete, use billOfMaterials
        /// </summary>
        [Newtonsoft.Json.JsonProperty("structureProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StructureProduct> StructureProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("internalProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }

        [Newtonsoft.Json.JsonProperty("manufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("warranty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warranty { get; set; }

        [Newtonsoft.Json.JsonProperty("pickStopNumberOfDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickStopNumberOfDays { get; set; }

        [Newtonsoft.Json.JsonProperty("receivingStopNumberOfDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReceivingStopNumberOfDays { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouseInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("reportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportData { get; set; }

        [Newtonsoft.Json.JsonProperty("subscriptionInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultSubscriptionRepeatCounter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultSubscriptionRepeatCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductMedia Media { get; set; }

        [Newtonsoft.Json.JsonProperty("productDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDates ProductDates { get; set; }

        [Newtonsoft.Json.JsonProperty("productProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductProperty> ProductProperties { get; set; }

        /// <summary>
        /// (Output) Used when the product uses product handling Configurable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productVariants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductVariant> ProductVariants { get; set; }

        /// <summary>
        /// (Output) Used when SupplyMode is BillOfMaterials
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billOfMaterials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductBillOfMaterial> BillOfMaterials { get; set; }

        /// <summary>
        /// (Output) Related products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productRelations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductRelation> ProductRelations { get; set; }

        /// <summary>
        /// (Output) A status on the masterdata for this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterDataSettingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDataMasterDataSettingStatus? MasterDataSettingStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductPrice
    {
        [Newtonsoft.Json.JsonProperty("salesUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantityAndUnit SalesUnit { get; set; } = new QuantityAndUnit();

        [Newtonsoft.Json.JsonProperty("calculateSalesUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CalculateSalesUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("productPriceListRows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductPriceListRow> ProductPriceListRows { get; set; } = new List<ProductPriceListRow>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductWarehouse
    {
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// The name of the InventoryManagementSource. Sample XLog, Manual, XLog OPI, Syncron, CTP, EDQC, CTPQ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryManagementSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductWarehouseInventoryManagementSource? InventoryManagementSource { get; set; }

        [Newtonsoft.Json.JsonProperty("subOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubOrderQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("reorderLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReorderLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("safetyStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SafetyStock { get; set; }

        [Newtonsoft.Json.JsonProperty("quantityRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterReference { get; set; }

        [Newtonsoft.Json.JsonProperty("startPrognosis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartPrognosis { get; set; }

        [Newtonsoft.Json.JsonProperty("coverTimeStartPrognosis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CoverTimeStartPrognosis { get; set; }

        [Newtonsoft.Json.JsonProperty("coverTimeMargin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoverTimeMargin { get; set; }

        [Newtonsoft.Json.JsonProperty("vauClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VauClass { get; set; }

        [Newtonsoft.Json.JsonProperty("minOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinOrderQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("maxOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxOrderQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("multipleQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MultipleQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("customerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("indicationMargin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IndicationMargin { get; set; }

        [Newtonsoft.Json.JsonProperty("daysToCover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DaysToCover { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSupplier
    {
        [Newtonsoft.Json.JsonProperty("supplierAgreement", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierAgreement { get; set; }

        [Newtonsoft.Json.JsonProperty("supplierProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("supplierProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("StatisticalNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("manufacturingLeadTimeHour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManufacturingLeadTimeHour { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductServices
    {
        [Newtonsoft.Json.JsonProperty("supplyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductServicesSupplyMode? SupplyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceHandling { get; set; }

        /// <summary>
        /// It is only possible to add new product handlings using the api. Removing a product handling must be done in backend.
        /// <br/>Individual, Series, Batch, HandleDate, Configurable, Bundled, Rental, NonOrderable, NonVisibleWhileOutOfStock, PhaseOut, CreateNewBatch, ReturnableProduct, PickInPackageUnitOnly, AskForUserNote, ReservationLogicOverride, HideBuyButton, RequestedBatchMandatory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productHandlings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProductHandlings> ProductHandlings { get; set; }

        [Newtonsoft.Json.JsonProperty("kpi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Kpi { get; set; }

        [Newtonsoft.Json.JsonProperty("unspecifiedProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnspecifiedProduct { get; set; }

        [Newtonsoft.Json.JsonProperty("softwareProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SoftwareProduct { get; set; }

        [Newtonsoft.Json.JsonProperty("predictorProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PredictorProduct { get; set; }

        [Newtonsoft.Json.JsonProperty("kolliProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? KolliProduct { get; set; }

        [Newtonsoft.Json.JsonProperty("consignmentProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsignmentProduct { get; set; }

        [Newtonsoft.Json.JsonProperty("vintage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vintage { get; set; }

        [Newtonsoft.Json.JsonProperty("grape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grape { get; set; }

        /// <summary>
        /// Alcohol percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alcohol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Alcohol { get; set; }

        [Newtonsoft.Json.JsonProperty("useDefaultDebitProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseDefaultDebitProducts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class QuantityAndUnit
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("gtiNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GtiNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductGroupsAndCategories
    {
        [Newtonsoft.Json.JsonProperty("productCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProductCategories { get; set; }

        [Newtonsoft.Json.JsonProperty("productFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFamily { get; set; }

        [Newtonsoft.Json.JsonProperty("assortmentCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssortmentCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("financialCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("companyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouseZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseZone { get; set; }

        [Newtonsoft.Json.JsonProperty("vatCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatCategory { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory1 { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory2 { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalCategory3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticalCategory3 { get; set; }

        [Newtonsoft.Json.JsonProperty("alphaSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AlphaSearch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Measurements
    {
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductTransportDetails
    {
        [Newtonsoft.Json.JsonProperty("unNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("customsClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomsClass { get; set; }

        [Newtonsoft.Json.JsonProperty("customsCommodityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomsCommodityCode { get; set; }

        /// <summary>
        /// Comma separated list of all GTINs for the product unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }

        [Newtonsoft.Json.JsonProperty("adr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductADR Adr { get; set; }

        /// <summary>
        /// Not in use. Removed in February 2021
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thermoTransportGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThermoTransportGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("thermoDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThermoDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("transportInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("transportPackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportPackageType { get; set; }

        [Newtonsoft.Json.JsonProperty("customsCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomsCost { get; set; }

        [Newtonsoft.Json.JsonProperty("theoreticalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TheoreticalCost { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StructureProduct
    {
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double ProductQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductMedia
    {
        [Newtonsoft.Json.JsonProperty("infoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InfoUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductDates
    {
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("changedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("changedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("externalChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExternalChangedDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductVariant
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string ProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("productAttributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductAttribute> ProductAttributes { get; set; } = new List<ProductAttribute>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductBillOfMaterial
    {
        /// <summary>
        /// Product number for the product included in the BOM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The quantity of the product included per 1 "mother"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        /// <summary>
        /// Name of unit for the product included in the BOM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        /// <summary>
        /// The sort order for how the included products are viewed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }

        /// <summary>
        /// The percent part of the BOM sales price that shall be logged on this product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partOfPricePercent", Required = Newtonsoft.Json.Required.Always)]
        public double PartOfPricePercent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductRelation
    {
        /// <summary>
        /// Product number for the related product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Relation type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productRelationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductRelationType ProductRelationType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductPriceListRow
    {
        [Newtonsoft.Json.JsonProperty("priceList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PriceList { get; set; }

        [Newtonsoft.Json.JsonProperty("numberSalesUnits", Required = Newtonsoft.Json.Required.Always)]
        public int NumberSalesUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Always)]
        public double VatPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductADR
    {
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }

        [Newtonsoft.Json.JsonProperty("freeQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("packageDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("flashpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Flashpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("packageGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("transportCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("imdg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imdg { get; set; }

        [Newtonsoft.Json.JsonProperty("marinePollutant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarinePollutant { get; set; }

        [Newtonsoft.Json.JsonProperty("limitedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LimitedQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("tunnelRestrictionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TunnelRestrictionCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductAttribute
    {
        [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AttributeType { get; set; }

        [Newtonsoft.Json.JsonProperty("attributeValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AttributeValue { get; set; }

    }

    /// <summary>
    /// The SearchParameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSupplierSearchParameters
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The supplier agreement number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreementNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SupplierAgreementNumber { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// List of product suppliers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSupplierAgreementList
    {
        /// <summary>
        /// The product supplier agreement list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productSupplierAgreementList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductSupplierAgreement> ProductSupplierAgreementList1 { get; set; } = new List<ProductSupplierAgreement>();

        /// <summary>
        /// The pagination information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    /// <summary>
    /// ProductSupplierAgreement
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductSupplierAgreement
    {
        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The supplier agreement number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreementNumber", Required = Newtonsoft.Json.Required.Always)]
        public int SupplierAgreementNumber { get; set; }

        /// <summary>
        /// The supplier agreement name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreementName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string SupplierAgreementName { get; set; }

        /// <summary>
        /// The statistical number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StatisticalNumber { get; set; }

        /// <summary>
        /// The country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 2)]
        public string Country { get; set; }

        /// <summary>
        /// The supplier product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierProductNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string SupplierProductNumber { get; set; }

        /// <summary>
        /// The supplier product name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string SupplierProductName { get; set; }

        /// <summary>
        /// (Output) The base product unit id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUnitId { get; set; }

        /// <summary>
        /// The price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        /// <summary>
        /// The manufacturing lead time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manufacturingLeadTimeHour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ManufacturingLeadTimeHour { get; set; }

        /// <summary>
        /// The VAT percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Always)]
        public double VatPercent { get; set; }

        /// <summary>
        /// The Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// When true, the purchase unit on product will be overridden with an agreement specific purchase unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useOtherPurchaseUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseOtherPurchaseUnit { get; set; }

        /// <summary>
        /// Used when useOtherPurchaseUnit is true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseProductUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseProductUnit { get; set; }

        /// <summary>
        /// Used when useOtherPurchaseUnit is true. Number of product units in one purchase unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityPerPurchaseProductUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QuantityPerPurchaseProductUnit { get; set; }

    }

    /// <summary>
    /// ProductUnit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProductUnit
    {
        /// <summary>
        /// (Output) The product unit id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductUnitId { get; set; }

        /// <summary>
        /// The product unit name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// The product unit description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(800)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Search parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderListSearchParameters
    {
        /// <summary>
        /// The purchase number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Create date from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateFrom { get; set; }

        /// <summary>
        /// Create date to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTo { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Get only open purchases
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// Get only purchases with something received
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReceived { get; set; }

        /// <summary>
        /// Purchase number from external system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOrderNumber { get; set; }

        /// <summary>
        /// Supplier number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierNumber { get; set; }

        /// <summary>
        /// Purchase number used by supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierOrderNumber { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Purchase order list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderListItemList
    {
        /// <summary>
        /// The purchase order list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseOrderListItem> PurchaseOrderList { get; set; } = new List<PurchaseOrderListItem>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    /// <summary>
    /// Purchase orders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderListItem
    {
        /// <summary>
        /// Purchase number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderListItemStatus Status { get; set; }

        /// <summary>
        /// Date when created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// True if any row is open
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOpen { get; set; }

        /// <summary>
        /// True if any row is received
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReceived", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReceived { get; set; }

        /// <summary>
        /// Purchase number from external system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOrderNumber { get; set; }

        /// <summary>
        /// Supplier number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierNumber { get; set; }

        /// <summary>
        /// Supplier name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Purchase number used by supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierOrderNumber { get; set; }

        /// <summary>
        /// Date when shipped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShippedDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrder
    {
        /// <summary>
        /// Header information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PurchaseOrderHeader Header { get; set; } = new PurchaseOrderHeader();

        /// <summary>
        /// List of rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseOrderRow> Rows { get; set; } = new List<PurchaseOrderRow>();

        /// <summary>
        /// (Output) List of shipments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PurchaseOrderShipment> Shipments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderHeader
    {
        /// <summary>
        /// Purchase number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Purchase number used by external system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalOrderNumber { get; set; }

        /// <summary>
        /// Purchase number used by supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SupplierOrderNumber { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderHeaderStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull DeliveryAddress { get; set; }

        /// <summary>
        /// Supplier number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PurchaseOrderSupplier Supplier { get; set; } = new PurchaseOrderSupplier();

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact BuyerContact { get; set; }

        /// <summary>
        /// Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Reference { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(400)]
        public string Notes { get; set; }

        /// <summary>
        /// Internal notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(400)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Exchange rate from purchase currency to base currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrencyExchangeRate { get; set; }

        /// <summary>
        /// Date when shipped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShippedDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderRow
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        /// <summary>
        /// (Output) External row position
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalPosition { get; set; }

        /// <summary>
        /// (Output) External row sub position
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalSubPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalSubPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("rowStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderRowRowStatus? RowStatus { get; set; }

        /// <summary>
        /// (Output) Date when status on row was changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusChangeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusChangeDate { get; set; }

        /// <summary>
        /// Product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// (Output) Product name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        /// Suppliers product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierProductNumber { get; set; }

        /// <summary>
        /// Purchase data, defined in the purchase unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseDataPurchaseUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityAndUnit PurchaseDataPurchaseUnit { get; set; }

        /// <summary>
        /// Purchase data, defined in the product unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseDataProductUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantityAndUnitWithPrice PurchaseDataProductUnit { get; set; } = new QuantityAndUnitWithPrice();

        /// <summary>
        /// Date describing when row is expected to be delivered to warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// (Output) Date describing when row originally was expected to be delivered to warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalExpectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginalExpectedDeliveryDate { get; set; }

        /// <summary>
        /// (Output) Date describing when row was shipped from supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(400)]
        public string Notes { get; set; }

        /// <summary>
        /// Purchase code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseCode { get; set; }

        /// <summary>
        /// (Output) Descriptive name of the Purchase code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseCodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseCodeName { get; set; }

        /// <summary>
        /// Loading purchase code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadingPurchaseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingPurchaseCode { get; set; }

        /// <summary>
        /// (Output) Descriptive name of the Purchase code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadingPurchaseCodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingPurchaseCodeName { get; set; }

        /// <summary>
        /// (Output) Details about units. Batch number, serial number and best before date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PurchaseOrderStockedUnit> UnitDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderShipment
    {
        [Newtonsoft.Json.JsonProperty("shipmentNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PurchaseOrderShipmentShipmentStatus ShipmentStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Packages { get; set; }

        [Newtonsoft.Json.JsonProperty("transportWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransportWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("transportVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransportVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveredTransportWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeliveredTransportWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveredTransportVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeliveredTransportVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("transportUnitQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportUnitQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("transportUnitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportUnitType { get; set; }

        [Newtonsoft.Json.JsonProperty("trackAndTraceURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackAndTraceURL { get; set; }

        [Newtonsoft.Json.JsonProperty("forwarder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forwarder { get; set; }

        [Newtonsoft.Json.JsonProperty("transportMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportMode { get; set; }

        [Newtonsoft.Json.JsonProperty("shipperName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipperName { get; set; }

        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderSupplier
    {
        /// <summary>
        /// Supplier number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierNumber { get; set; }

        /// <summary>
        /// (Output) Supplier name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Supplier agreement number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreementNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SupplierAgreementNumber { get; set; }

        /// <summary>
        /// Name of supplier agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierAgreement { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierAgreementAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull SupplierAgreementAddress { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact SupplierContact { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethodName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethodName { get; set; }

        /// <summary>
        /// (Output) transport condition is incoterms. (EXW, FCA, DDU, DDP, CYP, CIP, FAS, CFR, CIF, CPT, DAF, DES, DEQ, AVT, FOB, DAP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportCondition { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forwarder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forwarder { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forwarderCustomerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForwarderCustomerNumber { get; set; }

        /// <summary>
        /// (Output) Transport condition description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportConditionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportConditionDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseOrderStockedUnit
    {
        /// <summary>
        /// (Output) Quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// (Output) Serial number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// (Output) Batch number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// (Output) Best before date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bestBeforeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BestBeforeDate { get; set; }

    }

    /// <summary>
    /// Return order row code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderRowCodeList
    {
        /// <summary>
        /// The return order row code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnOrderRowCodeList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ReturnOrderRowCode> ReturnOrderRowCodeList1 { get; set; } = new List<ReturnOrderRowCode>();

    }

    /// <summary>
    /// Return order row code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderRowCode
    {
        /// <summary>
        /// Return order row code, short name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Search parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderListSearchParameters
    {
        /// <summary>
        /// The return number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnNumber { get; set; }

        /// <summary>
        /// Create date from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateFrom { get; set; }

        /// <summary>
        /// Create date to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTo { get; set; }

        /// <summary>
        /// Reference order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceOrderNumber { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Get only open returns
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// Get only returns with something received
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReceived { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Return order list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderListItemList
    {
        /// <summary>
        /// The return order list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnOrderList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ReturnOrderListItem> ReturnOrderList { get; set; } = new List<ReturnOrderListItem>();

        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInformation PaginationInfo { get; set; } = new PaginationInformation();

    }

    /// <summary>
    /// Return orders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderListItem
    {
        /// <summary>
        /// Return number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnNumber { get; set; }

        /// <summary>
        /// Type of return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderListItemReturnType ReturnType { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderListItemStatus Status { get; set; }

        /// <summary>
        /// Reference order number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceOrderNumber { get; set; }

        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Date when created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// Invoice number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// True if any row is open
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOpen { get; set; }

        /// <summary>
        /// True if any row is received
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReceived", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReceived { get; set; }

        /// <summary>
        /// Warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrder
    {
        /// <summary>
        /// Create action is needed when creating a new return order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnOrderCreateAction CreateAction { get; set; }

        /// <summary>
        /// Header information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnOrderHeader Header { get; set; }

        /// <summary>
        /// List of rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReturnOrderRow> Rows { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderCreateAction
    {
        /// <summary>
        /// ReturnCompleteCustomerOrder will create a return order for all delivered rows on specified order. orderNumber and returnCode are required.
        /// <br/>ReturnRowsFromCustomerOrder will create a return order for the specified rows existing on specified order. orderNumber and orderRows are required.
        /// <br/>ReturnProducts will create a return order without reference to an order. Full model is required.
        /// <br/>
        /// <br/>Possible actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderCreateActionAction Action { get; set; }

        /// <summary>
        /// Order number is needed when returning full or part of a known customer order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Specified order rows to return when using action ReturnRowsFromCustomerOrder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReturnOrderCustomerOrderRow> OrderRows { get; set; }

        /// <summary>
        /// Return code is needed when returning full customer order, see endpoint ReturnOrderRowCodes for your valid return codes. Normally A, B, C
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderHeader
    {
        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderHeaderReturnType? ReturnType { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceOrderNumber { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceExternalOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceExternalOrderNumber { get; set; }

        /// <summary>
        /// Reference on return order header
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDate { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderHeaderStatus? Status { get; set; }

        /// <summary>
        /// Customer number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// (Output) Customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Delivery method must be a valid transport mode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderHeaderPaymentType? PaymentType { get; set; }

        [Newtonsoft.Json.JsonProperty("senderAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull SenderAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("senderEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("senderPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("senderFax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderFax { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerOrderAdressFull InvoiceAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("creditInvoiceAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderHeaderCreditInvoiceAction? CreditInvoiceAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderRow
    {
        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubPosition { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnOrderRowRowStatus? RowStatus { get; set; }

        /// <summary>
        /// Return code, see endpoint ReturnOrderRowCodes for your valid return codes. Normally A, B, C
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// (Output) Descriptive name of the return code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// (Output) The product name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantityAndUnitWithPrice SalesData { get; set; } = new QuantityAndUnitWithPrice();

        /// <summary>
        /// (Output) Date describing when row is expected to be delivered to warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceOrderRowPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceOrderRowPosition { get; set; }

        /// <summary>
        /// (Output) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceOrderRowSubPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceOrderRowSubPosition { get; set; }

        /// <summary>
        /// (Output) Return order row id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnOrderRowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ReturnOrderRowId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReturnOrderCustomerOrderRow
    {
        /// <summary>
        /// Order rows position on customer order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public int Position { get; set; }

        /// <summary>
        /// Order rows sub position on customer order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPosition", Required = Newtonsoft.Json.Required.Always)]
        public int SubPosition { get; set; }

        /// <summary>
        /// Return code, see endpoint ReturnOrderRowCodes for your valid return codes. Normally A, B, C
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// Returned quantity in the products base unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Returned unit price in the products base unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

    }

    /// <summary>
    /// The Search parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarehouseStockLevelSearchParameters
    {
        /// <summary>
        /// The warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// The product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The number of the page. First page is 1. Default is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }

    }

    /// <summary>
    /// Stock level list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StockLevelList
    {
        /// <summary>
        /// The stock level list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stockLevelItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StockLevel> StockLevelItemList { get; set; } = new List<StockLevel>();

        /// <summary>
        /// The pagination information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paginationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationInformation PaginationInfo { get; set; }

    }

    /// <summary>
    /// Stock level
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StockLevel
    {
        /// <summary>
        /// Warehouse short name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Customer product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerProductNumber { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public int Balance { get; set; }

        /// <summary>
        /// Warehouse name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; }

    }

    /// <summary>
    /// Stock level adjust
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StockLevelAdjust
    {
        /// <summary>
        /// Warehouse short name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Customer product number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerProductNumber { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Balance difference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceDifference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BalanceDifference { get; set; }

        /// <summary>
        /// Reason code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

    }

    /// <summary>
    /// The status of the invoice
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSent")]
        InvoiceSent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paid")]
        Paid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepaid")]
        Prepaid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StatusError")]
        StatusError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportError")]
        ExportError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSentForCollection")]
        InvoiceSentForCollection = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCollectionClosed")]
        InvoiceCollectionClosed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingInvestigation")]
        PendingInvestigation = 10,

    }

    /// <summary>
    /// Type of invoice
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InvoiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OrderDebit")]
        OrderDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderCredit")]
        ReturnOrderCredit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomDebit")]
        CustomDebit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomCredit")]
        CustomCredit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderDebit")]
        ReturnOrderDebit = 4,

    }

    /// <summary>
    /// Which system that are sending the invoice to the customer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SendSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Extend")]
        Extend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnox")]
        Fortnox = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FortnoxNoxFinans")]
        FortnoxNoxFinans = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inexchange")]
        Inexchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalPart")]
        ExternalPart = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incoming")]
        Incoming = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncomingWithErrors")]
        IncomingWithErrors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminated")]
        Terminated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Annulled")]
        Annulled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldPayment")]
        OnHoldPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldManual")]
        OnHoldManual = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingForReview")]
        PendingForReview = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DraftAllocation")]
        DraftAllocation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyDelivered")]
        PartiallyDelivered = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incoterms
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
        EXW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
        FCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
        DDU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
        DDP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
        CIP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
        FOB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
        ATA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
        FAS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
        CFR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
        CIF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
        CPT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
        DAF = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DES")]
        DES = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
        DEQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AVT")]
        AVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
        DAP = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
        DPU = 17,

    }

    /// <summary>
    /// Status of the offer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resting")]
        Resting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    /// <summary>
    /// The supply mode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SupplyMode2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum BalanceAdjustmentListItemEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BalanceAdjustment")]
        BalanceAdjustment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Stocktaking")]
        Stocktaking = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CorrectionOuttake")]
        CorrectionOuttake = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UnAnnouncedOuttake")]
        UnAnnouncedOuttake = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalDamaged")]
        InternalDamaged = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CorrectionIntake")]
        CorrectionIntake = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnToSupplier")]
        ReturnToSupplier = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Scrap")]
        Scrap = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualReceiving")]
        ManualReceiving = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CorrectionReceiving")]
        CorrectionReceiving = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SystemStart")]
        SystemStart = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SystemCorrection")]
        SystemCorrection = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListSearchParametersInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSent")]
        InvoiceSent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paid")]
        Paid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepaid")]
        Prepaid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StatusError")]
        StatusError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportError")]
        ExportError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSentForCollection")]
        InvoiceSentForCollection = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCollectionClosed")]
        InvoiceCollectionClosed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingInvestigation")]
        PendingInvestigation = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListSearchParametersInvoiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OrderDebit")]
        OrderDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderCredit")]
        ReturnOrderCredit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomDebit")]
        CustomDebit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomCredit")]
        CustomCredit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderDebit")]
        ReturnOrderDebit = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListSearchParametersSendSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Extend")]
        Extend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnox")]
        Fortnox = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FortnoxNoxFinans")]
        FortnoxNoxFinans = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inexchange")]
        Inexchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalPart")]
        ExternalPart = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListItemInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSent")]
        InvoiceSent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paid")]
        Paid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepaid")]
        Prepaid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StatusError")]
        StatusError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportError")]
        ExportError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSentForCollection")]
        InvoiceSentForCollection = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCollectionClosed")]
        InvoiceCollectionClosed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingInvestigation")]
        PendingInvestigation = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListItemInvoiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OrderDebit")]
        OrderDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderCredit")]
        ReturnOrderCredit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomDebit")]
        CustomDebit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomCredit")]
        CustomCredit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderDebit")]
        ReturnOrderDebit = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListItemSendFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pdf")]
        Pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Svefaktura")]
        Svefaktura = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkToUrl")]
        LinkToUrl = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlOrderInvoiceExport")]
        XmlOrderInvoiceExport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Letter")]
        Letter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceListItemSendSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Extend")]
        Extend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnox")]
        Fortnox = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FortnoxNoxFinans")]
        FortnoxNoxFinans = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inexchange")]
        Inexchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalPart")]
        ExternalPart = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceHeaderCustomerInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSent")]
        InvoiceSent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paid")]
        Paid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepaid")]
        Prepaid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StatusError")]
        StatusError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportError")]
        ExportError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSentForCollection")]
        InvoiceSentForCollection = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCollectionClosed")]
        InvoiceCollectionClosed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingInvestigation")]
        PendingInvestigation = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceHeaderInvoiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OrderDebit")]
        OrderDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderCredit")]
        ReturnOrderCredit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomDebit")]
        CustomDebit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomCredit")]
        CustomCredit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderDebit")]
        ReturnOrderDebit = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceHeaderSendFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pdf")]
        Pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Svefaktura")]
        Svefaktura = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkToUrl")]
        LinkToUrl = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlOrderInvoiceExport")]
        XmlOrderInvoiceExport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Letter")]
        Letter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceHeaderSendSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Extend")]
        Extend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnox")]
        Fortnox = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FortnoxNoxFinans")]
        FortnoxNoxFinans = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inexchange")]
        Inexchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalPart")]
        ExternalPart = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerInvoiceRowSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderHeaderOrderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QuickOrder")]
        QuickOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Express")]
        Express = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderExpress")]
        ServiceOrderExpress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseTransferOrder")]
        WarehouseTransferOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderNormal")]
        ServiceOrderNormal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderPickup")]
        ServiceOrderPickup = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RMAOrder")]
        RMAOrder = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CDDestination")]
        CDDestination = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SeasonOrder")]
        SeasonOrder = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WebshopOrder")]
        WebshopOrder = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AgreedOrder")]
        AgreedOrder = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftshopOrder")]
        GiftshopOrder = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderHeaderOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incoming")]
        Incoming = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncomingWithErrors")]
        IncomingWithErrors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminated")]
        Terminated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Annulled")]
        Annulled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldPayment")]
        OnHoldPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldManual")]
        OnHoldManual = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingForReview")]
        PendingForReview = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DraftAllocation")]
        DraftAllocation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyDelivered")]
        PartiallyDelivered = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderHeaderPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Autogiro")]
        Autogiro = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvancePayment")]
        AdvancePayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Factoring")]
        Factoring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CashPayment")]
        CashPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LastSchrift")]
        LastSchrift = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualOnHold")]
        ManualOnHold = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FaktureraMig")]
        FaktureraMig = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CashOnDelivery")]
        CashOnDelivery = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftCard")]
        GiftCard = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PaypalPrepaid")]
        PaypalPrepaid = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"KlarnaPrepaid")]
        KlarnaPrepaid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CDONPrepaid")]
        CDONPrepaid = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BonusPoints")]
        BonusPoints = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FruugoPrepaid")]
        FruugoPrepaid = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FnacPrepaid")]
        FnacPrepaid = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WalleyPrepaid")]
        WalleyPrepaid = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FyndiqPrepaid")]
        FyndiqPrepaid = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DartyPrepaid")]
        DartyPrepaid = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ShopifyPrepaid")]
        ShopifyPrepaid = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderHeaderOrderDeliveryUpdateMailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoMail")]
        NoMail = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowRowOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowOrderRowStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incoming")]
        Incoming = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncomingWithErrors")]
        IncomingWithErrors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedWithErros")]
        ReservedWithErros = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseDone")]
        PurchaseDone = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseConfirmed")]
        PurchaseConfirmed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseDelivered")]
        PurchaseDelivered = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Picked")]
        Picked = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Annulled")]
        Annulled = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfirmationSent")]
        ConfirmationSent = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfirmationSentWithErrors")]
        ConfirmationSentWithErrors = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AwaitingPayment")]
        AwaitingPayment = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingForReview")]
        PendingForReview = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DraftAllocation")]
        DraftAllocation = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowProductVisibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AlwaysVisible")]
        AlwaysVisible = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPublic")]
        NonPublic = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowBackOrderHandlingId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BOASAP")]
        BOASAP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BOONHOLD")]
        BOONHOLD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL")]
        CANCEL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderRowAllocationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Purchase")]
        Purchase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAllocated")]
        NotAllocated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Delivered")]
        Delivered = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderListSearchParametersOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incoming")]
        Incoming = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncomingWithErrors")]
        IncomingWithErrors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminated")]
        Terminated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Annulled")]
        Annulled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldPayment")]
        OnHoldPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldManual")]
        OnHoldManual = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingForReview")]
        PendingForReview = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DraftAllocation")]
        DraftAllocation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyDelivered")]
        PartiallyDelivered = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderListSearchParametersSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderListItemOrderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QuickOrder")]
        QuickOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Express")]
        Express = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderExpress")]
        ServiceOrderExpress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseTransferOrder")]
        WarehouseTransferOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderNormal")]
        ServiceOrderNormal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOrderPickup")]
        ServiceOrderPickup = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RMAOrder")]
        RMAOrder = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CDDestination")]
        CDDestination = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SeasonOrder")]
        SeasonOrder = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WebshopOrder")]
        WebshopOrder = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AgreedOrder")]
        AgreedOrder = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftshopOrder")]
        GiftshopOrder = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerOrderListItemOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incoming")]
        Incoming = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncomingWithErrors")]
        IncomingWithErrors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminated")]
        Terminated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Annulled")]
        Annulled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldPayment")]
        OnHoldPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnHoldManual")]
        OnHoldManual = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingForReview")]
        PendingForReview = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DraftAllocation")]
        DraftAllocation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyDelivered")]
        PartiallyDelivered = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerSearchParametersIncoterms
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
        EXW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
        FCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
        DDU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
        DDP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
        CIP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
        FOB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
        ATA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
        FAS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
        CFR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
        CIF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
        CPT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
        DAF = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DES")]
        DES = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
        DEQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AVT")]
        AVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
        DAP = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
        DPU = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerMasterDataSettingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incomplete")]
        Incomplete = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualCompleted")]
        ManualCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualNotCompleted")]
        ManualNotCompleted = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsCustomerInvoiceSendFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pdf")]
        Pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Svefaktura")]
        Svefaktura = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkToUrl")]
        LinkToUrl = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlOrderInvoiceExport")]
        XmlOrderInvoiceExport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Letter")]
        Letter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsCustomerInvoiceSendReviewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoReview")]
        NoReview = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Review")]
        Review = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsCustomerInvoiceSendSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Extend")]
        Extend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnox")]
        Fortnox = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FortnoxNoxFinans")]
        FortnoxNoxFinans = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inexchange")]
        Inexchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalPart")]
        ExternalPart = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsCustomerInvoicingProcess
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Detailed")]
        Detailed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aggregated")]
        Aggregated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AggregatedOtherCustomer")]
        AggregatedOtherCustomer = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsPreferedCustomerInvoiceSendType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Print")]
        Print = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticEmail")]
        AutomaticEmail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EDI")]
        EDI = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualEmail")]
        ManualEmail = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EDIUsingExport")]
        EDIUsingExport = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SetToSent")]
        SetToSent = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerFinancialSettingsDefaultPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Autogiro")]
        Autogiro = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvancePayment")]
        AdvancePayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Factoring")]
        Factoring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CashPayment")]
        CashPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LastSchrift")]
        LastSchrift = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualOnHold")]
        ManualOnHold = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FaktureraMig")]
        FaktureraMig = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CashOnDelivery")]
        CashOnDelivery = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftCard")]
        GiftCard = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PaypalPrepaid")]
        PaypalPrepaid = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"KlarnaPrepaid")]
        KlarnaPrepaid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CDONPrepaid")]
        CDONPrepaid = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BonusPoints")]
        BonusPoints = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FruugoPrepaid")]
        FruugoPrepaid = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FnacPrepaid")]
        FnacPrepaid = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WalleyPrepaid")]
        WalleyPrepaid = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FyndiqPrepaid")]
        FyndiqPrepaid = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DartyPrepaid")]
        DartyPrepaid = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ShopifyPrepaid")]
        ShopifyPrepaid = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerClassificationCustomerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reseller")]
        Reseller = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerLogisticsSettingsCustomerOrderingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Bookable")]
        Bookable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OfferableOnly")]
        OfferableOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Blocked")]
        Blocked = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerLogisticsSettingsDefaultPartialDelivery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerLogisticsSettingsBackOrderSetting
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BOASAP")]
        BOASAP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BOONHOLD")]
        BOONHOLD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Clientsdefault")]
        Clientsdefault = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELALL")]
        CANCELALL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELBOASAP")]
        CANCELBOASAP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELBOONH")]
        CANCELBOONH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELIMMEDIATE")]
        CANCELIMMEDIATE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerLogisticsSettingsTransportCondition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
        EXW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
        FCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
        DDU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
        DDP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
        CIP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
        FOB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
        ATA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
        FAS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
        CFR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
        CIF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
        CPT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
        DAF = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DES")]
        DES = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
        DEQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AVT")]
        AVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
        DAP = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
        DPU = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerLogisticsSettingsOrderDeliveryUpdateMailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoMail")]
        NoMail = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferListSearchParametersOfferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resting")]
        Resting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferListItemOfferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resting")]
        Resting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferHeaderOfferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resting")]
        Resting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferHeaderTransportCondition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
        EXW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
        FCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
        DDU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
        DDP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
        CIP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
        FOB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
        ATA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
        FAS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
        CFR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
        CIF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
        CPT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
        DAF = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DES")]
        DES = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
        DEQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AVT")]
        AVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
        DAP = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
        DPU = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferHeaderPaymentTypeId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Autogiro")]
        Autogiro = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvancePayment")]
        AdvancePayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Factoring")]
        Factoring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CashPayment")]
        CashPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LastSchrift")]
        LastSchrift = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualOnHold")]
        ManualOnHold = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FaktureraMig")]
        FaktureraMig = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CashOnDelivery")]
        CashOnDelivery = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftCard")]
        GiftCard = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PaypalPrepaid")]
        PaypalPrepaid = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"KlarnaPrepaid")]
        KlarnaPrepaid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CDONPrepaid")]
        CDONPrepaid = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BonusPoints")]
        BonusPoints = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FruugoPrepaid")]
        FruugoPrepaid = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FnacPrepaid")]
        FnacPrepaid = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WalleyPrepaid")]
        WalleyPrepaid = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FyndiqPrepaid")]
        FyndiqPrepaid = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DartyPrepaid")]
        DartyPrepaid = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ShopifyPrepaid")]
        ShopifyPrepaid = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OfferRowSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductSearchParametersSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductListItemSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductDataProductPurchaseFactorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ProductUnitsPerPurchaseUnit")]
        ProductUnitsPerPurchaseUnit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseUnitsPerProductUnit")]
        PurchaseUnitsPerProductUnit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductDataProductVisibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AlwaysVisible")]
        AlwaysVisible = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPublic")]
        NonPublic = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductDataMasterDataSettingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incomplete")]
        Incomplete = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualCompleted")]
        ManualCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualNotCompleted")]
        ManualNotCompleted = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductWarehouseInventoryManagementSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"XLOG")]
        XLOG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XLOGOPI")]
        XLOGOPI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalSystem")]
        ExternalSystem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CoverTime")]
        CoverTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EDQC")]
        EDQC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CPTQ")]
        CPTQ = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductServicesSupplyMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Warehouse")]
        Warehouse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirectDelivery")]
        DirectDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogic")]
        FlowLogic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowLogicDist")]
        FlowLogicDist = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseService")]
        WarehouseService = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentPenalty")]
        PaymentPenalty = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDiscrepancy")]
        PaymentDiscrepancy = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Round")]
        Round = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BillOfMaterials")]
        BillOfMaterials = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductHandlings
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Series")]
        Series = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HandleDate")]
        HandleDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Configurable")]
        Configurable = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Bundled")]
        Bundled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Rental")]
        Rental = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NonOrderable")]
        NonOrderable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NonVisibleWhileOutOfStock")]
        NonVisibleWhileOutOfStock = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PhaseOut")]
        PhaseOut = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CreateNewBatch")]
        CreateNewBatch = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnableProduct")]
        ReturnableProduct = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PickInPackageUnitOnly")]
        PickInPackageUnitOnly = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AskForUserNote")]
        AskForUserNote = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationLogicOverride")]
        ReservationLogicOverride = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SerialNumber")]
        SerialNumber = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"HideBuyButton")]
        HideBuyButton = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestedBatchMandatory")]
        RequestedBatchMandatory = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProductRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Accessory")]
        Accessory = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SparePart")]
        SparePart = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Alternative")]
        Alternative = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Replacement")]
        Replacement = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderListItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyReceived")]
        PartiallyReceived = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderHeaderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyReceived")]
        PartiallyReceived = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderRowRowStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Correction")]
        Correction = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderShipmentShipmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ResourceAllocated")]
        ResourceAllocated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LoadingConfirmed")]
        LoadingConfirmed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmed")]
        DeliveryConfirmed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UnPlanned")]
        UnPlanned = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderListItemReturnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderKnown")]
        ReturnOrderKnown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderUnknown")]
        ReturnOrderUnknown = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderClaim")]
        ReturnOrderClaim = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderMultipleOrders")]
        ReturnOrderMultipleOrders = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderService")]
        ReturnOrderService = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderRMA")]
        ReturnOrderRMA = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderListItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyReceived")]
        PartiallyReceived = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderCreateActionAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnCompleteCustomerOrder")]
        ReturnCompleteCustomerOrder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnRowsFromCustomerOrder")]
        ReturnRowsFromCustomerOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnProducts")]
        ReturnProducts = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderHeaderReturnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderKnown")]
        ReturnOrderKnown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderUnknown")]
        ReturnOrderUnknown = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderClaim")]
        ReturnOrderClaim = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderMultipleOrders")]
        ReturnOrderMultipleOrders = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderService")]
        ReturnOrderService = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOrderRMA")]
        ReturnOrderRMA = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderHeaderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyReceived")]
        PartiallyReceived = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderHeaderPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Autogiro")]
        Autogiro = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvancePayment")]
        AdvancePayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Factoring")]
        Factoring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CashPayment")]
        CashPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LastSchrift")]
        LastSchrift = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualOnHold")]
        ManualOnHold = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FaktureraMig")]
        FaktureraMig = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CashOnDelivery")]
        CashOnDelivery = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GiftCard")]
        GiftCard = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PaypalPrepaid")]
        PaypalPrepaid = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"KlarnaPrepaid")]
        KlarnaPrepaid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CDONPrepaid")]
        CDONPrepaid = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BonusPoints")]
        BonusPoints = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FruugoPrepaid")]
        FruugoPrepaid = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FnacPrepaid")]
        FnacPrepaid = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementOrder")]
        ReplacementOrder = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WalleyPrepaid")]
        WalleyPrepaid = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FyndiqPrepaid")]
        FyndiqPrepaid = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DartyPrepaid")]
        DartyPrepaid = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ShopifyPrepaid")]
        ShopifyPrepaid = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderHeaderCreditInvoiceAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Immediate")]
        Immediate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WhenReceived")]
        WhenReceived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReturnOrderRowRowStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ordered")]
        Ordered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Correction")]
        Correction = 3,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExtendSharpException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ExtendSharpException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExtendSharpException<TResult> : ExtendSharpException
    {
        public TResult Result { get; private set; }

        public ExtendSharpException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016